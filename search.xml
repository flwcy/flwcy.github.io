<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[hexo搭建个人博客]]></title>
      <url>http://flwcy.coding.me/2016/07/05/build-personal-blog/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文主要基于window系统以及Hexo3版本，其他系统除了软件的安装方式和命令有些差异，其他基本一样。一般hexo都是托管在github上，但是毕竟github是国外的网站，访问速度上还是有点慢，所以就将博客部署在国内的托管平台coding上。<br><a id="more"></a></p>
<h2 id="前置步骤"><a href="#前置步骤" class="headerlink" title="前置步骤"></a>前置步骤</h2><p> 所需软件:</p>
</blockquote>
<ul>
<li><a href="!https://nodejs.org/en/">node.js</a> :因为Hexo是一款基于Node.js的静态博客框架，所以我们还需要node.js来创建Hexo博客框架。</li>
<li><a href="!https://git-scm.com/">git</a> :将本地的Hexo内容提交至git中</li>
</ul>
<p>如果已经安装好了上述必备程序，那么接下来只需要使用npm命令完成hexo的安装。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo -cli</span><br></pre></td></tr></table></figure></p>
<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p> 接下来我们需要用Hexo初始化一个博客，然后更改一些自定义的配置，或者加上自己喜欢的主题，写上第一篇文章，然后发布到自己的个人coding网站(userName.coding.me)。</p>
<h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p> 将下面的userName替换成你自己的昵称，执行成功后会在指定文件夹中新建所需要的文件。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init userName.coding.me</span><br></pre></td></tr></table></figure></p>
<p> 新建完成后，指定文件夹目录如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br><span class="line">|   └── landscape</span><br></pre></td></tr></table></figure></p>
<p> 为了使博客更加美观，我们为博客安装一个双栏博客主题，切换至刚刚生成的hexo目录<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd userName.coding.me</span><br></pre></td></tr></table></figure></p>
<p> 安装Hexo主题yelee<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</span><br></pre></td></tr></table></figure></p>
<p> 执行完毕后会看到主题已经安装到对应目录，再修改Hexo根目录对应配置文件_config.yml，即可切换到Yelee主题<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: Yelee</span><br></pre></td></tr></table></figure></p>
<p> 执行以下命令预览当前主题,测试服务启动，你可以在浏览器中输入<a href="https://localhost:4000" target="_blank" rel="external">https://localhost:4000</a> 进行访问了。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></p>
<p> 主题配置文件在userName.coding.me/themes/yelee/_comfig.yml中修改，本文略过，具体可查看 <a href="!http://moxfive.coding.me/yelee/">主题配置文档</a> 。</p>
<h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p> 在<a href="!https://coding.net/register">Coding</a>上进行注册，然后在Coding上创建一个项目，在本地浏览自己的博客没问题后，我们就需要把博客部署到到Coding上，现在根目录下找到_config.yml文件，并进入编辑。我们找到deploy这项，具体修改如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  #我们是使用 git 来部署的。</span><br><span class="line">  type: git</span><br><span class="line">  # git 仓库的地址,userName为coding的用户名，projectName为创建的项目名称</span><br><span class="line">  repo: https://git.coding.net/userName/projectName.git</span><br><span class="line">  #分支名称</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<p> <strong>注意事项：</strong>修改配置文件时，必须严格按照特定的格式，必须是这个格式，type，repo，branch前两个空格，“：”后面一个空格。<br> 按照上面的修改好_config.yml配置文件过后，还需要安装自动部署发布工具(hexo-deployer-git)才能够使用部署命令将博客部署到<a href="!https://coding.net">Coding</a>上。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p> 执行config命令配置用户名和邮箱：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config -–global user.name &quot;xxx&quot;</span><br><span class="line">git config –-global user.email &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></figure></p>
<p> 测试没问题后，就可以使用如下命令将生成的静态网页文件发布到Coding上：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p>
<p> 把代码push到Coding上之前，终端会让你输入邮箱和密码，正确输入后，稍等片刻，就会将博客上传至Coding上。以后每次博客有更新，都可以使用该条命令进行发布。</p>
<h3 id="Pages演示"><a href="#Pages演示" class="headerlink" title="Pages演示"></a>Pages演示</h3><p> 为了能够访问博客，我们需要将博客托管到<a href="!https://coding.net/help/doc/pages/index.html">Coding Pages</a>上,首先在本地创建一个Readme.md的文件说明，将项目文件夹初始化为Git版本库并提交Readme.md到版本库，并未项目添加远程仓库地址<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add  Readme.md</span><br><span class="line">git commit -m &apos;init&apos;</span><br><span class="line">git remote add origin git@git.coding.net:&#123;user_name&#125;/&#123;project_name&#125;</span><br></pre></td></tr></table></figure></p>
<p> 在本地创建一个 coding-pages 分支，切换到该分支<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b coding-pages</span><br></pre></td></tr></table></figure></p>
<p> 将 coding-pages 分支推送到 Coding.net<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  push origin coding-pages</span><br></pre></td></tr></table></figure></p>
<p> 进入私有项目页面，点击左侧栏的 <code>代码</code> 面板 ，选择 <code>Pages 服务</code> 一项可以看到部署 Pages 的设置。（公开项目点击 Pages 选项卡即可），填写您欲部署的分支（默认为 <code>coding-pages</code> ），点击 <code>立即开启</code> ，稍等片刻即可完成部署并通过 {user_name}.coding.me 访问您的网站。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JDBC入门]]></title>
      <url>http://flwcy.coding.me/2016/06/30/start-jdbc/</url>
      <content type="html"><![CDATA[<p>什么是JDBC?<br>Java语言访问数据库的一种规范,是一套API。JDBC (Java Database Connectivity) API，即Java数据库编程接口，是一组标准的Java语言中的接口和类，使用这些接口和类，Java客户端程序可以访问各种不同类型的数据库。比如建立数据库连接、执行SQL语句进行数据的存取操作。<br><a id="more"></a></p>
<h3 id="一-初识JDBC"><a href="#一-初识JDBC" class="headerlink" title="(一) 初识JDBC"></a><strong>(一) 初识JDBC</strong></h3><h4 id="jdbc的概念"><a href="#jdbc的概念" class="headerlink" title="jdbc的概念"></a><strong>jdbc的概念</strong></h4><pre><code>jdbc:java data base connectivity
jdbc由一些接口和类构成的api，是javaSE的一部分，位于java.sql以及javax.sql包下。
sun公司提供了这些连接数据库的规范，由数据库的生产厂商提供驱动程序。
</code></pre><p><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_01.jpg" alt="jdbc关系图"></p>
<h4 id="数据库连接的基本步骤"><a href="#数据库连接的基本步骤" class="headerlink" title="数据库连接的基本步骤"></a><strong>数据库连接的基本步骤</strong></h4><p>1、注册数据库驱动(Driver)<br>2、建立连接(Connection)<br>3、创建执行sql语句(一般是Statement及其子类)<br>4、执行sql语句获得结果集(ResultSet)<br>5、处理执行结果（在非查询语句中，该步骤可以省略）<br>6、关闭连接，释放资源</p>
<h4 id="Talk-is-cheap-Show-me-the-code"><a href="#Talk-is-cheap-Show-me-the-code" class="headerlink" title="Talk is cheap.Show me the code"></a><strong>Talk is cheap.Show me the code</strong></h4><p>首先进行一些准备工作，创建表，本bolg是在mysql新建的db_jdbc库中创建了表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> db_user(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    user_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    birthday <span class="built_in">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>为了方便，先插入两条测试数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> db_user(<span class="keyword">id</span>,user_name,<span class="string">`password`</span>,email,birthday) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">"jjr"</span> ,<span class="string">"jjr123"</span> ,<span class="string">"jjr123@126.net"</span> ,<span class="string">"1991-09-08"</span> );</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> db_user(<span class="keyword">id</span>,user_name,<span class="string">`password`</span>,email,birthday) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">"js123"</span> ,<span class="string">"123456"</span> ,<span class="string">"js123@126.net"</span> ,<span class="string">"1991-09-08"</span> )</span><br></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20160320235726656" alt="测试数据"><br>查看JDBC文档，我们发现首先需要下载或者拷贝一份数据库驱动程序到本机，然后将驱动程序添加到项目中，我使用的是MySql数据库，因此去MySql官网下载驱动程序。</p>
<blockquote>
<p>Installing a JDBC driver generally consists of copying the driver to your computer, then adding the location of it to your class path.</p>
</blockquote>
<p>编写查询所有数据的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//1、注册驱动(Driver)</span></span><br><span class="line">    DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    <span class="comment">//2、建立数据库连接(Connection)</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">//3、创建执行sql语句(一般是Statement及其子类)</span></span><br><span class="line">    Statement statement = conn.createStatement();</span><br><span class="line">    <span class="comment">//4、执行sql语句获得结果集(ResultSet)</span></span><br><span class="line">    ResultSet resultSet = statement.executeQuery(<span class="string">"select * from db_user"</span>);</span><br><span class="line">    <span class="comment">//5、处理执行结果，在非查询语句中，该步骤可以省略</span></span><br><span class="line">    <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">        String result = String.format(<span class="string">"id=%s,userName=%s,passowrd=%s,email=%s,birthday=%s"</span>, resultSet.getInt(<span class="string">"id"</span>),</span><br><span class="line">                resultSet.getString(<span class="string">"user_name"</span>),resultSet.getString(<span class="string">"password"</span>), resultSet.getString(<span class="string">"email"</span>)</span><br><span class="line">                ,resultSet.getDate(<span class="string">"birthday"</span>));</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6、关闭连接，释放资源</span></span><br><span class="line">    resultSet.close();</span><br><span class="line">    statement.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果显示如下<br><img src="http://img.blog.csdn.net/20160321003904486" alt="执行结果"></p>
<h4 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a><strong>代码详解</strong></h4><h5 id="注册驱动的三种方式"><a href="#注册驱动的三种方式" class="headerlink" title="注册驱动的三种方式"></a><strong>注册驱动的三种方式</strong></h5><p>在步骤一中我们注册了数据库的驱动，常用的注册驱动有三种方式<br>方式一：通过DriverManager.registerDriver(new com.mysql.jdbc.Driver());<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">secondConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//该方法在编译时需要导入对应的jar包</span></span><br><span class="line">    DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>,conn.isClosed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>方式二：通过Class.forName(“com.mysql.jdbc.Driver”)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstConn</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException,SQLException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>,conn.isClosed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>方式三：通过System.setProperty(“jdbc.drivers”,”com.mysql.jdbc.Driver”);可以一次注册多个驱动，中间用”:”隔开就可以了.比如System.setProperty(“jdbc.drivers”,”XXXDriver:XXXDriver:XXXDriver”);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thridConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">    As part of its initialization, the DriverManager class will attempt to load the driver classes referenced in the "jdbc.drivers" system property.</span><br><span class="line">     */</span></span><br><span class="line">    System.setProperty(<span class="string">"jdbc.Drivers"</span>, <span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>, conn.isClosed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在DriverManager源码中<br><img src="http://img.blog.csdn.net/20160321230615961" alt="源代码"><br>Drivers以”:”分隔<br><img src="http://img.blog.csdn.net/20160321230656414" alt="源代码"><br>推荐使用Class.forName这种方式。<br>我们进行源代码分析，DriverManager自身内部维护了一个registeredDrivers集合，DriverManager决定使用哪个驱动来获取连接并不是由开发者所决定的，而是遍历所有已注册的驱动来尝试获取连接，成功就返回连接，失败就略过。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(DriverInfo aDriver : registeredDrivers) &#123;</span><br><span class="line">            <span class="comment">// If the caller does not have permission to load the driver then</span></span><br><span class="line">            <span class="comment">// skip it.</span></span><br><span class="line">            <span class="keyword">if</span>(isDriverAllowed(aDriver.driver, callerCL)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    println(<span class="string">"    trying "</span> + aDriver.driver.getClass().getName());</span><br><span class="line">                    Connection con = aDriver.driver.connect(url, info);</span><br><span class="line">                    <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// Success!</span></span><br><span class="line">                        println(<span class="string">"getConnection returning "</span> + aDriver.driver.getClass().getName());</span><br><span class="line">                        <span class="keyword">return</span> (con);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (reason == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        reason = ex;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                println(<span class="string">"    skipping: "</span> + aDriver.getClass().getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>哪么registeredDrivers集合是从哪来的呢？从DriverManager类中我们发现只能通过registerDriver方法可以往registeredDrivers中注册驱动，因此应该是由驱动类自行将自己注册到registeredDrivers中，这一点可以查看com.mysql.jdbc.Driver的源代码，Class.forName将类加载到JVM时会执行静态代码块的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">extends</span> <span class="title">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">sql</span>.<span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can\'t register driver!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>综上所述，我们调用方法registerDriver就相当于又向drivers列表中放了一次driver驱动，代码不够”优雅”,而且会对具体的类产生了依赖。因此推荐使用Class.forName(“com.mysql.jdbc.Driver”)这种方式，可以通过配置文件的方式使代码更加灵活。</p>
<h5 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a><strong>获取数据库连接</strong></h5><p>连接数据库的过程就是通过驱动与数据库建立连接，一般我们写的应用程序与数据库并不在同一台机器上的，因此需要建立网络连接，实际上底层就是通过TCP/IP建立一个socket连接。数据库会有很多权限验证的，因此我们需要提供对应的用户名以及密码。<br>查看api文档，发现DriverManager中共有三种获得数据库连接的方式<br><img src="http://img.blog.csdn.net/20160323001902848" alt="Connection"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstGetConn</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException,SQLException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc?user=root&amp;password=123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>, connection.isClosed());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">secondGetConn</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException,SQLException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.setProperty(<span class="string">"user"</span>,<span class="string">"root"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"password"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>, properties);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>, connection.isClosed());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thirdGetConn</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>, conn.isClosed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中数据库连接的url可查看对应数据库厂商提供的api文档，主流的url格式如下：<br><img src="http://img.blog.csdn.net/20160323002038816" alt="url格式"><br>本机使用MySql数据库，查看<a href="https://dev.mysql.com/doc/connector-j/en/connector-j-reference-configuration-properties.html" target="_blank" rel="external">Mysql文档</a><br><img src="http://img.blog.csdn.net/20160323002240694" alt="msql"></p>
<h5 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a><strong>代码优化</strong></h5><p>加载数据库驱动只需执行一次(放在静态代码块中)，资源的获取以及获取数据库的连接可以抽离成独立的方法。一般这些都是写在工具类中，工具类禁止继承(final),工具类只构造一个实例(单例模式/static方法)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rooike.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 数据库操作的工具类</span><br><span class="line"> * Created by Rooike on 2015/9/29.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JdbcUtils</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//  1.加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取数据库连接</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     *  释放数据库资源</span><br><span class="line">     * <span class="doctag">@param</span> resultSet</span><br><span class="line">     * <span class="doctag">@param</span> statement</span><br><span class="line">     * <span class="doctag">@param</span> connection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(resultSet != <span class="keyword">null</span>)&#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        connection.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于单例模式可以查看<a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/" target="_blank" rel="external">如何正确的写出单例模式</a>，这里我们写一个单例数据库工具类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rooike.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 单例（静态内部类的形式）的数据库连接工具类</span><br><span class="line"> * Created by Rooike on 2015/9/29.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfDbUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SelfDbUtils</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url = <span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String user = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SelfDbUtils INSTANCE = <span class="keyword">new</span> SelfDbUtils();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SelfDbUtils <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection,Statement statement,ResultSet resultSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(resultSet != <span class="keyword">null</span>)</span><br><span class="line">                resultSet.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(statement != <span class="keyword">null</span>)</span><br><span class="line">                    statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)</span><br><span class="line">                        connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>数据库的连接是非常稀有的资源，因此涉及数据库的操作时，我们使用完成后，应该及时释放资源。另外程序在运行过程中可能会出现各种异常，我们的应用有义务告诉上层使用者到底出现了什么问题，因此需要保证异常链不能中断，这样就需要一个异常传递的过程。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello 个人博客]]></title>
      <url>http://flwcy.coding.me/2016/06/28/hello-world/</url>
      <content type="html"><![CDATA[<p>之前在跟同学聊天时听他说起搭建<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>个人静态博客，在<a href="https://kyleljj.github.io/" target="_blank" rel="external">lujj</a>的劝诱下，花了几天的时间搭建了自己的个人博客。</p>
<a id="more"></a>
<h3 id="开博缘由"><a href="#开博缘由" class="headerlink" title="开博缘由"></a>开博缘由</h3><p>之前自己也在csdn上写博客，大部分都是自己学习过程中的总结，方便自己复习，之所以搭建个人博客，大体是如下几点原因吧！</p>
<ul>
<li>独立/简洁/自由:不想其他网站上的博客一样，广告或者推广消息漫天飞舞！</li>
<li>记录：记录自己的学习轨迹，便于时常复习，在写博客的时间能够进行知识点的总结。</li>
<li>分享：与人玫瑰，手有余香！<h3 id="Coding-hexo-markdown"><a href="#Coding-hexo-markdown" class="headerlink" title="Coding+hexo+markdown"></a>Coding+hexo+markdown</h3>关于博客具体的搭建可以参考我的另一篇博文<a href="http://flwcy.coding.me/2016/07/05/build-personal-blog/">hexo搭建个人博客</a>，博客使用的是hexo搭建的，为了提高网站的访问速度，将博客托管在<a href="https://coding.net/" target="_blank" rel="external">Coding</a>上，图床使用<a href="http://www.qiniu.com/" target="_blank" rel="external">七牛云</a>来存储的，博客主题使用的是<a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">yelee主题</a>，标签云参照这篇博文<a href="http://www.netcan666.com/2015/12/15/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96%E7%90%83%E5%BD%A2%E6%A0%87%E7%AD%BE%E4%BA%91/index.html" target="_blank" rel="external">Hexo个性化球形标签云</a>修改的。<br>MarkDown 相信已经成为技术人员的写文档，博客的标配，我也是才开始使用这个没多久，因此本地使用<a href="http://www.typora.io/" target="_blank" rel="external">Typora</a>，所见即所得的编写。<h3 id="关于博客的未来"><a href="#关于博客的未来" class="headerlink" title="关于博客的未来"></a>关于博客的未来</h3>既然花了一段时间搞博客，而且大部分博文也陆续迁移过来了，当然希望能够坚持的更新下去（ps：断更可耻）。希望自己以此为动力，能够不断的去点亮自己的技能树，并锻炼自己总结和分享的能力。<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><a href="http://lovenight.github.io/2015/11/10/Hexo-3-1-1-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/index.html" target="_blank" rel="external">Hexo-3-1-1-静态博客搭建指南</a><br><a href="http://moxfive.coding.me/yelee/" target="_blank" rel="external">Yelee主题使用说明</a><br><a href="http://tengj.top/2016/03/14/hexo6seo/" target="_blank" rel="external">hexo干货系列：（六）hexo提交搜索引擎（百度+谷歌）</a><br><a href="http://www.netcan666.com/2015/12/15/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96%E7%90%83%E5%BD%A2%E6%A0%87%E7%AD%BE%E4%BA%91/index.html" target="_blank" rel="external">Hexo个性化球形标签云</a></li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
