<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JDBC数据类型详解]]></title>
      <url>http://flwcy.coding.me/2016/07/18/03-jdbc-data-detailed/</url>
      <content type="html"><![CDATA[<p>由于 SQL 数据类型和 Java 数据类型是不同的，因此JDBC 驱动程序在将 Java 数据类型发送到数据库之前，会将其转换为相应的 JDBC 类型。对于大多数数据类型都采用了默认的映射关系。例如，一个 Java int 数据类型转换为 SQL INTEGER。通过默认的映射关系来提供驱动程序之间的一致性。</p>
<a id="more"></a>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>JDBC中提供了我们所能见到的所有数据类型，其中像String、int等等，赋值使用的是PreparedStatement中的setter方法(类似setShot、setString等等)，取值使用的是ResultSet中的getter方法(类似getInt、getLong等等)可以查看Preparedstatement的API文档<br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_data_01.jpg" alt="API文档"><br>其中如果不知道数据表中数据类型或者不能确定是什么类型的情况下，可以直接使用setObject方法和getObject方法进行获取和设置.</p>
<h2 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h2><p>其中日期类型是比较特殊的一个类型，我们看一下ResultSet的getDate方法<br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_data_02.jpg" alt="getDate"></p>
<blockquote>
<p>以Java编程语言中的java.sql.Date对象形式获取此ResultSet对象的当前行中指定列的值。<br>参数:<br>columnIndex  第一个列是1，第二个列是2，……<br>返回：<br>列值;如果值为SQL NULL，则返回值为null</p>
</blockquote>
<p>其中返回值Date类型是java.sql.Date类型。<br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_data_03.jpg" alt="java.sql.Date"></p>
<ul>
<li>java.sql.Date是java.util.Date的子类</li>
</ul>
<p>基本上一般的数据库都支持三种形式的datetime字段(date/time/timestamp),每一种数据库的datetime字段在JDBC中都有与之对应的类，这些类都继承自java.util.Date.</p>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/index.html?java/sql/Date.html" target="_blank" rel="external">java.sql.Date</a>对应于SQL DATE，这意味着它存储了年、月和天，而小时、分钟、秒和毫秒均被忽略。此外sql.Date不依赖时区.</li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/index.html?java/sql/Time.html" target="_blank" rel="external">java.sql.Time</a>对应于SQL TIME，应该是显而易见的仅包含了小时、分钟、秒和毫秒这些信息.</li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/index.html?java/sql/Timestamp.html" target="_blank" rel="external">java.sql.Timestamp</a>对应于SQL TIMESTAMP，这是精确到纳秒的确切日期(请注意java.util.Date仅支持到毫秒),可以自定义精度.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sqlDateTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line">        <span class="comment">//新增记录 java.sql.date java.sql.Time java.sql.Timestamp</span></span><br><span class="line">        String sql = <span class="string">"insert into db_date_test(sql_date,sql_time,sql_timestamp) VALUES(?,?,?)"</span>;</span><br><span class="line">        preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        java.sql.Date sqlDate = <span class="keyword">new</span> java.sql.Date(System.currentTimeMillis());</span><br><span class="line">        java.sql.Time sqlTime = <span class="keyword">new</span> Time(System.currentTimeMillis());</span><br><span class="line">        java.sql.Timestamp timestamp = <span class="keyword">new</span> Timestamp(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        preparedStatement.setDate(<span class="number">1</span>,sqlDate);</span><br><span class="line">        preparedStatement.setTime(<span class="number">2</span>,sqlTime);</span><br><span class="line">        preparedStatement.setTimestamp(<span class="number">3</span>,timestamp);</span><br><span class="line"></span><br><span class="line">        preparedStatement.executeUpdate();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.close(<span class="keyword">null</span>, preparedStatement, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询数据库查看结果:<br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_data_04.jpg" alt="结果"><br>至于java.sql.Date与java.util.Date两者之间的转换，有一个很简单的方法。<br>因为两者都提供了一个long型的构造函数，两者通过getTime重新构造一下就行了。<br>即： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.util.Date date1 = ...; </span><br><span class="line">java.sql.Date date2 = ...; </span><br><span class="line"></span><br><span class="line">date1 = <span class="keyword">new</span> java.sql.Date(date2.getTime()); </span><br><span class="line">date2 = <span class="keyword">new</span> java.util.Date(date1.getTime());</span><br></pre></td></tr></table></figure>
<p>在数据库时间建模和操作时习惯用java.sql.Timestamp，与数据库中DateTime对应，但业务流通层，还是习惯只用java.util.Date，因为这些时间直接的转换都是一样的方便，而且这样做逻辑理解上比较直观。<br>修改数据:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id,java.util.Date date)</span></span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line">        <span class="comment">//新增记录 java.sql.date java.sql.Time java.sql.Timestamp</span></span><br><span class="line">        String sql = <span class="string">"update db_date_test set sql_timestamp=? where id=?"</span>;</span><br><span class="line">        preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        preparedStatement.setTimestamp(<span class="number">1</span>, <span class="keyword">new</span> java.sql.Timestamp(date.getTime()));</span><br><span class="line">        preparedStatement.setInt(<span class="number">2</span>,id);</span><br><span class="line">        result = preparedStatement.executeUpdate();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.close(<span class="keyword">null</span>, preparedStatement, connection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询数据:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> java.util.<span class="function">Date <span class="title">read</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    Date date = <span class="keyword">null</span>;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line">        <span class="comment">//新增记录 java.sql.date java.sql.Time java.sql.Timestamp</span></span><br><span class="line">        String sql = <span class="string">"select sql_timestamp from db_date_test where id=?"</span>;</span><br><span class="line">        preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        preparedStatement.setInt(<span class="number">1</span>,id);</span><br><span class="line">        resultSet = preparedStatement.executeQuery();</span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            <span class="comment">//Timestamp是java.util.Date的子类</span></span><br><span class="line">            date = resultSet.getTimestamp(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.close(<span class="keyword">null</span>, preparedStatement, connection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CLOB类型"><a href="#CLOB类型" class="headerlink" title="CLOB类型"></a>CLOB类型</h2><p>当我们存储大量的文本信息时，数据库中的varchar或者varchar2肯定是不能满足的，varchar2最多只能有4000个长度，当我们需要存放一篇文章或者一个文本信息时，可以使用CLOB类型来满足我们的需求。在MySQL数据库中CLOB类型对应的是Text，DB2/Oracle中clob对应clob。</p>
<ul>
<li>创建数据表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`db_clob_test`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`db_clob_test`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> (<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`news`</span> <span class="built_in">Text</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> AUTO_INCREMENT = <span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_unicode_ci;</span><br></pre></td></tr></table></figure>
<p>接下来写代码实现写入以及读取的操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//        InputStream in = null;</span></span><br><span class="line">        Reader reader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils.getConn();</span><br><span class="line">            String sql = <span class="string">"insert into db_clob_test(news) VALUES(?)"</span>;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"><span class="comment">//            in = new FileInputStream(new File("src/com/rooike/dao/impl/PreparedUserDaoImpl.java"));</span></span><br><span class="line"><span class="comment">//            preparedStatement.setAsciiStream(1,in);</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"src/com/rooike/dao/impl/PreparedUserDaoImpl.java"</span>);</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</span><br><span class="line">            preparedStatement.setCharacterStream(<span class="number">1</span>, reader,(<span class="keyword">int</span>)file.length());</span><br><span class="line">            result = preparedStatement.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(<span class="keyword">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>setAsciiStream(): 此方法用于提供大的ASCII值。</li>
<li>setCharacterStream(): 此方法用于提供大的UNICODE值。</li>
<li>setBinaryStream(): 使用此方法，以提供大的二进制值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">    PrintWriter writer = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line">        String sql = <span class="string">"select news from db_clob_test where id=?"</span>;</span><br><span class="line">        preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">        writer = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"src/PreparedUserDaoImpl.java_tmp"</span>))));</span><br><span class="line">        preparedStatement.setInt(<span class="number">1</span>, id);</span><br><span class="line">        resultSet = preparedStatement.executeQuery();</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(resultSet.getCharacterStream(<span class="string">"news"</span>));</span><br><span class="line">            String result = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((result = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                writer.println(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.close(resultSet, preparedStatement, connection);</span><br><span class="line">        writer.close();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外读取CLOB数据可以使用getClob方法,具体代码实现如下所示:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readByClob</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JdbcUtils.getConn();</span><br><span class="line">            String sql = <span class="string">"select news from db_clob_test where id=?"</span>;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            writer = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"src/PreparedUserDaoImpl.java_tmp"</span>))));</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>, id);</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                Clob clob = resultSet.getClob(<span class="string">"news"</span>);</span><br><span class="line">                <span class="keyword">if</span>(clob != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    writer.println(clob.getSubString((<span class="keyword">long</span>)<span class="number">1</span>,(<span class="keyword">int</span>)clob.length()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(resultSet, preparedStatement, connection);</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="BLOB类型"><a href="#BLOB类型" class="headerlink" title="BLOB类型"></a>BLOB类型</h2><p>BLOB和CLOB都是大字段类型,BLOB是按二进制存储的,而CLOB是可以直接存储文字的。通常像图片、文件、音乐等信息就使用BLOB字段来存储,先将文件转为二进制再存储进去.而像文章或者文本信息就使用CLOB存储。下面我们通过一个示例来进行演示</p>
<ul>
<li>创建数据表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`db_blob_test`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`db_blob_test`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> (<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`img`</span> <span class="built_in">BLOB</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> AUTO_INCREMENT = <span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_unicode_ci;</span><br></pre></td></tr></table></figure>
<ul>
<li>保存二进制数据至数据库中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public int insert()&#123;</span><br><span class="line">    int result = -1;</span><br><span class="line">    Connection connection = null;</span><br><span class="line">    PreparedStatement preparedStatement = null;</span><br><span class="line">    InputStream in = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line">        String sql = &quot;insert into db_blob_test(img) VALUES(?)&quot;;</span><br><span class="line">        preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        in = new FileInputStream(new File(&quot;src/paul.jpg&quot;));</span><br><span class="line">        preparedStatement.setBinaryStream(1,in);</span><br><span class="line">        result = preparedStatement.executeUpdate();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        JdbcUtils.close(null,preparedStatement,connection);</span><br><span class="line">        try &#123;</span><br><span class="line">            if(in != null)</span><br><span class="line">                in.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return  result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行正常，并且查看数据库，数据库中存放了图片的信息。由于通过SQL语句无法查看图片信息，所以我们通过读取的方式展示一下。</p>
<ul>
<li>读取二进制文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    InputStream in = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line">        String sql = <span class="string">"SELECT img FROM db_blob_test where id = ?"</span>;</span><br><span class="line">        preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">        preparedStatement.setInt(<span class="number">1</span>,id);</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"src/paul_blob.jpg"</span>);</span><br><span class="line">        resultSet = preparedStatement.executeQuery();</span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            <span class="comment">//Blob blob = resultSet.getBlob("img");</span></span><br><span class="line">            <span class="comment">//in = blob.getBinaryStream();</span></span><br><span class="line">            in = resultSet.getBinaryStream(<span class="string">"img"</span>);</span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>((len = in.read(b)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                out.write(b,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.close(resultSet,preparedStatement,connection);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(out != <span class="keyword">null</span>)</span><br><span class="line">                out.close();</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>)</span><br><span class="line">                in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结束之后，我们可以在src目录下看到该图片.</p>
<h2 id="其他数据类型"><a href="#其他数据类型" class="headerlink" title="其他数据类型"></a>其他数据类型</h2><p>其他数据类型可以查看<a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-type-conversions.html" target="_blank" rel="external">数据库</a>和jdbc相关的文档,或者在java.sql.Types中查看所涉及的所有类型信息.<br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_data_05.jpg" alt="types"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何正确地写出单例模式]]></title>
      <url>http://flwcy.coding.me/2016/07/15/singleton-pattern/</url>
      <content type="html"><![CDATA[<p>作者： <a href="http://wuchong.me/" target="_blank" rel="external">Jark</a><br>出处：<a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/" target="_blank" rel="external">http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/</a><br>声明：本文采用以下协议进行授权： <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">知识共享 署名-非商业-相同方式分享 4.0 国际 授权条款</a>，转载请注明作者及出处。<br><a id="more"></a></p>
<hr>
<p>单例模式算是设计模式中最容易理解，也是最容易手写代码的模式了吧。但是其中的坑却不少，所以也常作为面试题来考。本文主要对几种单例写法的整理，并分析其优缺点。很多都是一些老生常谈的问题，但如果你不知道如何创建一个线程安全的单例，不知道什么是双检锁，那这篇文章可能会帮助到你。</p>
<h2 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h2><p>当被问到要实现一个单例模式时，很多人的第一反应是写出如下的代码，包括教科书上也是这样教我们的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">         instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码简单明了，而且使用了懒加载模式，但是却存在致命的问题。当有多个线程并行调用 getInstance() 的时候，就会创建多个实例。也就是说在多线程下不能正常工作。</p>
<h2 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h2><p>为了解决上面的问题，最简单的方法是将整个 getInstance() 方法设为同步（synchronized）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。这就引出了双重检验锁。</p>
<h2 id="双重检验锁"><a href="#双重检验锁" class="headerlink" title="双重检验锁"></a>双重检验锁</h2><p>双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查 instance == null，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                         <span class="comment">//Single Checked</span></span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                 <span class="comment">//Double Checked</span></span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码看起来很完美，很可惜，它是有问题。主要在于instance = new Singleton()这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p>
<ol>
<li>给 instance 分配内存</li>
<li>调用 Singleton 的构造函数来初始化成员变量</li>
<li>将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）<br>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。</li>
</ol>
<p>我们只需要将 instance 变量声明成 volatile 就可以了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance; <span class="comment">//声明成 volatile</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                         </span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;       </span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p>
<p>但是特别注意在 Java 5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 volatile。</p>
<p>相信你不会喜欢这种复杂又隐含问题的方式，当然我们有更好的实现线程安全的单例模式的办法。</p>
<h2 id="饿汉式-static-final-field"><a href="#饿汉式-static-final-field" class="headerlink" title="饿汉式 static final field"></a>饿汉式 static final field</h2><p>这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//类加载时就初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种写法如果完美的话，就没必要在啰嗦那么多双检锁的问题了。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</p>
<h2 id="静态内部类-static-nested-class"><a href="#静态内部类-static-nested-class" class="headerlink" title="静态内部类 static nested class"></a>静态内部类 static nested class</h2><p>我比较倾向于使用静态内部类的方法，这种方法也是《Effective Java》上所推荐的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE; </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种写法仍然使用JVM本身机制保证了线程安全问题；由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</p>
<h2 id="枚举-Enum"><a href="#枚举-Enum" class="headerlink" title="枚举 Enum"></a>枚举 Enum</h2><p>用枚举写单例实在太简单了！这也是它最大的优点。下面这段代码就是声明枚举实例的通常做法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EasySingleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。但是还是很少看到有人这样写，可能是因为不太熟悉吧。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般来说，单例模式有五种写法：懒汉、饿汉、双重检验锁、静态内部类、枚举。上述所说都是线程安全的实现，文章开头给出的第一种方法不算正确的写法。</p>
<p>就我个人而言，一般情况下直接使用饿汉式就好了，如果明确要求要懒加载（lazy initialization）会倾向于使用静态内部类，如果涉及到反序列化创建对象时会试着使用枚举的方式来实现单例。</p>
<h2 id="Read-More"><a href="#Read-More" class="headerlink" title="Read More"></a>Read More</h2><p><a href="http://javarevisited.blogspot.sg/2014/05/double-checked-locking-on-singleton-in-java.html" target="_blank" rel="external">Double Checked Locking on Singleton Class in Java</a><br><a href="http://javarevisited.blogspot.my/2012/07/why-enum-singleton-are-better-in-java.html" target="_blank" rel="external">Why Enum Singleton are better in Java</a><br><a href="http://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html" target="_blank" rel="external">How to create thread safe Singleton in Java</a><br><a href="http://javarevisited.blogspot.com/2011/03/10-interview-questions-on-singleton.html" target="_blank" rel="external">10 Singleton Pattern Interview questions in Java</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Statement与PreparedStatement]]></title>
      <url>http://flwcy.coding.me/2016/07/12/02-statement-detailed/</url>
      <content type="html"><![CDATA[<p>PreparedStatement是用来执行SQL查询语句的API之一，Java提供了 Statement、PreparedStatement 和 CallableStatement三种方式来执行查询语句，其中 Statement 用于通用查询， PreparedStatement 用于执行参数化查询，而 CallableStatement则是用于存储过程。同时PreparedStatement还经常会在Java面试被提及，譬如：Statement与PreparedStatement的区别以及如何避免SQL注入式攻击？</p>
<a id="more"></a>
<h2 id="Statement详解"><a href="#Statement详解" class="headerlink" title="Statement详解"></a>Statement详解</h2><p>Statement是与数据库打交道最关键的一个接口，该接口包括了我们常用的 CRUD操作，我们查看API文档发现这么一段说明：</p>
<blockquote>
<p>By default, only one ResultSet object per Statement object can be open at the same time. Therefore, if the reading of one ResultSet object is interleaved with the reading of another, each must have been generated by different Statement objects. All execution methods in the Statement interface implicitly close a statment’s current ResultSet object if an open one exists. </p>
</blockquote>
<p><strong>在默认情况下，同一时间每个Statement只能打开一个ResultSet对象。</strong>因此，如果读取一个ResultSet对象与读取另一个交叉，则这两个对象必须是又不同的Statement对象生成。如果使用相同的Statement打开了新的ResultSet对象，则Statement接口中的所有执行方法都会隐式关闭之前的ResultSet对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     Connection conn = <span class="keyword">null</span>;</span><br><span class="line">     Statement statement = <span class="keyword">null</span>;</span><br><span class="line">     ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = JdbcUtils.getConn();</span><br><span class="line">         statement = conn.createStatement();</span><br><span class="line">         String sql = <span class="string">"select count(*) from db_user"</span>;</span><br><span class="line">         resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">         String _sql = <span class="string">"select user_name,password,email,birthday from db_user where id = 1"</span>;</span><br><span class="line">         <span class="comment">//会隐式关闭之前的ResultSet对象</span></span><br><span class="line">         ResultSet _resultSet = statement.executeQuery(_sql);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//As it seems the junit.framework.Assert class has been moved to org.junit.Assert in JUnit 4.0 - you can use that instead, it's not deprecated.</span></span><br><span class="line">         Assert.assertEquals(<span class="keyword">true</span>, resultSet.isClosed());</span><br><span class="line">     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         JdbcUtils.close(resultSet,statement,conn);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h2><h3 id="1-新增数据的方法"><a href="#1-新增数据的方法" class="headerlink" title="1.新增数据的方法"></a>1.新增数据的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    Statement statement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String sql = <span class="string">"insert into db_jdbc.db_user(user_name,password,email,birthday) values('%s','%s','%s','%s')"</span>;</span><br><span class="line">        sql = String.format(sql, user.getUserName(), user.getPassword(), user.getEmail(), user.getBirthday());</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line"></span><br><span class="line">        statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        statement.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.close(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-读取数据的方法"><a href="#2-读取数据的方法" class="headerlink" title="2.读取数据的方法"></a>2.读取数据的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    User record = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="keyword">null</span> || id &lt;= <span class="number">0</span>) <span class="keyword">return</span> record;</span><br><span class="line">    String sql = <span class="string">"select * from db_jdbc.db_user where id = %s"</span>;</span><br><span class="line">    sql = String.format(sql, id);</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    Statement statement = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line">        statement = connection.createStatement();</span><br><span class="line">        resultSet = statement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            String userName = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">            String password = resultSet.getString(<span class="number">3</span>);</span><br><span class="line">            String email = resultSet.getString(<span class="number">4</span>);</span><br><span class="line">            Timestamp birthday = resultSet.getTimestamp(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            record = <span class="keyword">new</span> User();</span><br><span class="line">            record.setId(id);</span><br><span class="line">            record.setUserName(userName);</span><br><span class="line">            record.setEmail(email);</span><br><span class="line">            record.setBirthday(birthday);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.close(resultSet, statement, connection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> record;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-修改数据的方法"><a href="#3-修改数据的方法" class="headerlink" title="3.修改数据的方法"></a>3.修改数据的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">    User record = selectById(user.getId());</span><br><span class="line"></span><br><span class="line">    String sql = <span class="string">"update db_jdbc.db_user set user_name='%s',password='%s',email='%s',birthday='%s' where id = %s"</span>;</span><br><span class="line">    String userName = (user.getUserName() == <span class="keyword">null</span>) ? record.getUserName() : user.getUserName();</span><br><span class="line">    String password = (user.getPassword() == <span class="keyword">null</span>) ? record.getPassword() : user.getPassword();</span><br><span class="line">    String email = (user.getEmail() == <span class="keyword">null</span>) ? record.getEmail() : user.getEmail();</span><br><span class="line">    Timestamp birthday = (user.getBirthday() == <span class="keyword">null</span>) ? record.getBirthday() : user.getBirthday();</span><br><span class="line">    sql = String.format(sql, userName, password, email, birthday,user.getId());</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    Statement statement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line">        statement = connection.createStatement();</span><br><span class="line">        result = statement.executeUpdate(sql);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.close(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-删除数据的方法"><a href="#4-删除数据的方法" class="headerlink" title="4.删除数据的方法"></a>4.删除数据的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    Integer result = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="keyword">null</span> || id &lt;= <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">    String sql = <span class="string">"delete from db_jdbc.db_user where id = %s"</span>;</span><br><span class="line">    sql = String.format(sql, id);</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    Statement statement = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line">        statement = connection.createStatement();</span><br><span class="line">        result = statement.executeUpdate(sql);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.close(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Statement的SQL注入问题"><a href="#Statement的SQL注入问题" class="headerlink" title="Statement的SQL注入问题"></a>Statement的SQL注入问题</h2><p>如某个网站的登录验证SQL查询代码为：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> db_user <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'" + userName + "'</span> <span class="keyword">and</span> pw = <span class="string">'"+ passWord +"'</span>;"</span><br></pre></td></tr></table></figure>
<p>如果我们恶意输入如下的参数:</p>
<table>
<thead>
<tr>
<th style="text-align:center">userName</th>
<th style="text-align:center">passWord</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">any_value’ or ‘1’ = ‘1’;show tables --rooike</td>
<td style="text-align:center">any_value</td>
</tr>
</tbody>
</table>
<p>那么最终SQL语句就变成了：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> db_user <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'any_value'</span> <span class="keyword">or</span> <span class="string">'1'</span> = <span class="string">'1'</span>;<span class="keyword">show</span> <span class="keyword">tables</span> <span class="comment">-- rooike and pw = 'any_value';"</span></span><br></pre></td></tr></table></figure>
<p><strong>在MySQL中，最后连续的两个减号表示忽略此SQL减号后面的语句.</strong>因为WHERE条件恒为真，这就相当于执行：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> db_user;<span class="keyword">SHOW</span> <span class="keyword">TABLES</span><span class="string">"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：在MySQL中，最后连续的两个减号表示忽略此SQL减号后面的语句，我本机的MySQL版本号为5.6.12，目前几乎所有SQL注入实例都是直接采用两个减号结尾，但是实际测试，这个版本号的MySQL要求两个减号后面必须要有空格才能正常注入，而浏览器是会自动删除掉URL尾部空格的，所以我们的注入会在两个减号后面统一添加任意一个字符或单词，本篇文章的SQL注入实例统一以 – rooike 结尾。</p>
</blockquote>
<p>因此可以达到无账号密码亦可登录网站且数据库表的名字db_user也被打印在了页面上。如果恶意用户要是更坏一点，用户输入如下参数:</p>
<table>
<thead>
<tr>
<th style="text-align:center">userName</th>
<th style="text-align:center">passWord</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">any_value</td>
<td style="text-align:center">‘; DROP TABLE db_user where ‘1’ = ‘1</td>
</tr>
</tbody>
</table>
<p>那么最终SQL语句变成了：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> db_user <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'any_value'</span> <span class="keyword">and</span> pw = <span class="string">''</span>; <span class="keyword">DROP</span> <span class="keyword">TABLE</span> db_user <span class="keyword">where</span> <span class="string">'1'</span> = <span class="string">'1'</span>;"</span><br></pre></td></tr></table></figure>
<p>这样一来，虽然没有登录，但是数据表都被删除了。通过以上的描述，我们简单的总结一下Statement的缺点</p>
<ul>
<li>执行时发送 sql，影响效率.</li>
<li>同样的 sql，每次都要发送，不能进行有效的缓存，是一种资源的浪费.</li>
<li>为了防止恶意数据我们还需要编写附加的程序（过滤器）带来不必要的开支.</li>
<li>拼接 sql 字符串很容易出现错误.</li>
</ul>
<h2 id="参数化查询"><a href="#参数化查询" class="headerlink" title="参数化查询"></a>参数化查询</h2><p>SQL Query 1:字符串追加形式的PreparedStatement</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String userName = getUserName();</span><br><span class="line">PreparedStatement prestmt = conn.prepareStatement(<span class="string">"select user_name,password,email,birthday from db_user where user_name="</span> + userName);</span><br></pre></td></tr></table></figure>
<p>SQL Query 2：使用参数化查询的PreparedStatement</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String userName = getUserName();</span><br><span class="line">PreparedStatement prestmt = conn.prepareStatement(<span class="string">"select user_name,password,email,birthday from db_user where user_name=?"</span>);</span><br><span class="line">prestmt.setString(<span class="number">1</span>,userName);</span><br></pre></td></tr></table></figure>
<p>这里的”?”就是参数的占位符(<strong>占位符的索引位置从1开始而不是0，如果填入0会导致<em>java.sql.SQLException invalid column index</em>异常。所以如果PreparedStatement有两个占位符，那么第一个参数的索引时1，第二个参数的索引是2.</strong>)。</p>
<h2 id="预处理语句"><a href="#预处理语句" class="headerlink" title="预处理语句"></a>预处理语句</h2><p>为了解决之前所说的问题，我们需要学习一个新的接口PreparedStatement，比起凌乱的字符串追加似的查询，PreparedStatement查询可读性更好、更安全，另外，<strong>PreparedStatement比Statement对象生成的查询速度更快。</strong></p>
<p>PreparedStatement是java.sql包下面的一个驱动，PreparedStatement继承于Statement，用来执行SQL语句查询。通过调用connection.preparedStatement(sql)方法可以获得PreparedStatment对象。PreparedStatement与java.sql.Connection对象是关联的，一旦你关闭了connection，PreparedStatement也没法使用了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String url = <span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String userName = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (user == <span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">       Connection connection = <span class="keyword">null</span>;</span><br><span class="line">       PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           String sql = <span class="string">"insert into db_jdbc.db_user(user_name,password,email,birthday) values(?,?,?,?)"</span>;</span><br><span class="line">           sql = String.format(sql, user.getUserName(), user.getPassword(), user.getEmail(), user.getBirthday());</span><br><span class="line">           connection = JdbcUtils.getConn();</span><br><span class="line"></span><br><span class="line">           preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">           preparedStatement.setString(<span class="number">1</span>,user.getUserName());</span><br><span class="line">           preparedStatement.setString(<span class="number">2</span>,user.getPassword());</span><br><span class="line">           preparedStatement.setString(<span class="number">3</span>,user.getEmail());</span><br><span class="line">           preparedStatement.setTimestamp(<span class="number">4</span>, user.getBirthday());</span><br><span class="line"></span><br><span class="line">           preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           JdbcUtils.close(<span class="keyword">null</span>, preparedStatement, connection);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>应用程序在创建好PreparedStatement后，DBMS就已经对SQL进行了预编译(数据库对SQL语句的分析，编译，优化已经在第一次查询前完成了)，同时DBMS会把SQL保存到高速缓存中，调用executeupdate()后，DBMS就直接执行SQL语句了，第二次执行时DBMS会直接查询高速缓存，只要高速缓存中还能找到相同的SQL就无需重新对SQL进行语法语义分析了，这样一来， 这种预处理语句查询比普通的查询运行速度更快。另外，传递给PreparedStatement对象的参数可以被强制进行类型转换，使开发人员可以确保在插入或查询数据时与底层的数据库格式相匹配。</p>
<p>在使用参数化查询的情况下，数据库系统（eg:MySQL）不会将参数的内容视为SQL指令的一部分来处理，而是在数据库完成SQL指令的编译后，才套用参数运行，因此，<strong>即使参数里有敏感字符如 or ‘1=1’数据库也会将其作为一个参数来处理，而不会作为一个SQL指令。</strong>因此使用PreparedStatement的参数化的查询可以阻止大部分的SQL注入。为了减少数据库的负载，生产环境中的JDBC代码你应该尽量使用PreparedStatement 。</p>
<h2 id="PreparedStatement的局限性"><a href="#PreparedStatement的局限性" class="headerlink" title="PreparedStatement的局限性"></a>PreparedStatement的局限性</h2><p> 为了防止SQL注入攻击，PreparedStatement不允许一个占位符（？）有多个值，在执行有<strong>IN</strong>子句查询的时候这个问题变得棘手起来。下面这个SQL查询使用PreparedStatement就不会返回任何结果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"SELECT * FROM db_user WHERE user_name IN (?)"</span>;</span><br><span class="line">preparedSatement.setString(<span class="number">1</span>, <span class="string">"'jjr123', 'rooike', 'js123'"</span>);</span><br></pre></td></tr></table></figure>
<p>简单总结一下PreparedStatement的优点:</p>
<ul>
<li>PreparedStatement可以阻止常见的SQL注入式攻击，因为它会自动对特殊字符转义。</li>
<li>PreparedStatement可以写参数化查询，比起凌乱的字符串追加似的查询，PreparedStatement查询可读性更好、更安全。</li>
<li>对于PreparedStatement来说， 数据库系统会对sql语句进行预编译处理（如果JDBC驱动支持的话），所以其执行速度要快于 Statement 对象。 特别是如果带有不同参数的同一SQL语句被多次执行的时候效率更高。 (Statement总是在执行时发送sql，影响效率.同样的sql，每次都要发送，不能进行有效的缓存，是一种资源的浪费)。</li>
</ul>
<h2 id="More-Read"><a href="#More-Read" class="headerlink" title="More Read"></a>More Read</h2><ul>
<li><a href="http://docs.oracle.com/javase/tutorial/jdbc/basics/index.html" target="_blank" rel="external">JDBC Basics</a></li>
<li><a href="http://www.importnew.com/5006.html" target="_blank" rel="external">JDBC为什么要使用PreparedStatement而不是Statement</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法说明]]></title>
      <url>http://flwcy.coding.me/2016/07/11/markdown_syntax/</url>
      <content type="html"><![CDATA[<p>Markdown是一种用来写作的轻量级『标记语言』，它用简洁的语法代替排版，它使我们能够专心于码字，用『标记』语法来代替常见的排版格式。Markdown的语法简洁明了，学习容易，而且功能比很多纯文本更强，因此很多人用它来写博客。<br><a id="more"></a></p>
<h2 id="关于Markdown"><a href="#关于Markdown" class="headerlink" title="关于Markdown"></a>关于Markdown</h2><h3 id="Markdown官方文档"><a href="#Markdown官方文档" class="headerlink" title="Markdown官方文档"></a>Markdown官方文档</h3><blockquote>
<p>更多详细的语法使用可以查看Markdown的官方语法规则文档，本篇文章只是记录了一些个人常用的语法的具体用法:</p>
<ul>
<li><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external"><em>创始人 John Gruber 的 Markdown 语法说明</em></a></li>
<li><a href="http://wowubuntu.com/markdown/#list" target="_blank" rel="external"><em>Markdown 中文版语法说明</em></a></li>
</ul>
</blockquote>
<h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p>工欲善其事，必先利其器！支持Markdown的编辑器太多了，功能也不完全一致，有的是用来进行基本写作的，有的是用来写代码的。本博文就介绍下本人用过的一些Markdown编辑器。</p>
<ul>
<li>马克飞象：实时同步预览，可以同步笔记到印象笔记中，支持导出pdf格式，付费软件，可以免费试用。</li>
<li>cmd markdown：实时同步预览，全平台且提供web版。</li>
<li>MarkdownPad： 一款全功能的编辑器，被很多人称赞为windows 平台最好用的markdown编辑器。</li>
<li>Haroopad：显示效果不错，支持代码高亮，缺点是无法导出pdf文档。</li>
<li>Typora：免费极简的Markdown编辑器，合并了书写和预览，所见即所得。</li>
</ul>
<p>当然也可以使用工作编辑器来打造Markdown编辑器，比如Sublime Text+或者Atom的各种Markdown+Floding+七牛package。 </p>
<h2 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题是写文章最常用的格式之一，在平常的写作当中，我们需要类似如下的操作：输入文本，选中文本，设置标题格式。而在Markdown中，我们只需要在文本前加入#即可。行首插入1-6个 # ，每增加一个 # 表示更深入层次的内容，对应到标题的深度由 1-6 阶，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<p>注：#和文本之间隔一个空格，这是最标准的Markdown写法。</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 <code>&gt;</code> 就好了，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;  “文化”可以用四句话表达:植根于内心的修养;无需提醒的自觉;以约束为前提的自由;为别人着想的善良。—— 梁晓声</span><br></pre></td></tr></table></figure>
<p><em>注：&gt; 和文本之间要保留一个字符的空格。</em></p>
<h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><p>Markdown的粗体和斜体的语法也很简单，Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，具体语法如下（带“*”星号的文本样式，在原版Markdown标准中不存在，但在其大部分衍生标准中被添加）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**粗体**</span><br><span class="line">__粗体__</span><br><span class="line">*斜体*</span><br><span class="line">_斜体_</span><br><span class="line">*删除线：~~text~~</span><br></pre></td></tr></table></figure>
<p>但是<strong>如果你的 <code>\*</code> 和<code>_</code>两边都有空白的话，它们就只会被当成普通的符号</strong>。如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*this text is surrounded by literal asterisks\*</span><br></pre></td></tr></table></figure>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>我们可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表格式也是我们常用的格式之一，具体的书写语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表项目</span><br><span class="line">- 无序列表项目</span><br><span class="line">- 无序列表项目</span><br><span class="line"></span><br><span class="line">* 无序列表项目</span><br><span class="line">* 无序列表项目</span><br><span class="line">* 无序列表项目</span><br><span class="line"></span><br><span class="line">1. 有序列表项目</span><br><span class="line">2. 有序列表项目</span><br><span class="line">3. 有序列表项目</span><br><span class="line"></span><br><span class="line">- 外层列表项目</span><br><span class="line"> + 内层列表项目</span><br><span class="line"> + 内层列表项目</span><br><span class="line"> + 内层列表项目</span><br><span class="line">- 外层列表项目</span><br></pre></td></tr></table></figure>
<p><em>注：-、1.和文本之间要保留一个字符的空格。</em></p>
<h3 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h3><p>当我们需要在博文中插入外链，只需要使用 <code>[显示文本](链接地址)</code> 这样的语法即可，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[flwcy&apos;s blog](http://flwcy.coding.me/)</span><br><span class="line">[无链接的链接][null-link]</span><br><span class="line">[null-link]: chrome://not-a-link</span><br></pre></td></tr></table></figure>
<p>当我们需要在博文中插入外链，只需要使用<code>![](图片链接地址)</code> 这样的语法即可，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![jdbc_start_01](http://o9fozt3s5.bkt.clouddn.com/jdbc_start_01.jpg)</span><br></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>作为一个程序员，我们经常需要在博文中添加示例代码，如果仅仅对一句代码高亮，只需要用`把中间的代码包裹起来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`字符`（简短文字添加代码框）</span><br></pre></td></tr></table></figure>
<p>如果要对整段代码加高亮，则需要在整段代码两端加三个`，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​```代码块```（代码块）</span><br></pre></td></tr></table></figure>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格的语法比较麻烦点，具体写法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 一个普通标题 | 一个普通标题 | 一个普通标题 |</span><br><span class="line">| ------| ------ | ------ |</span><br><span class="line">| 短文本 | 中等文本 | 稍微长一点的文本 |</span><br><span class="line">| 稍微长一点的文本 | 短文本 | 中等文本 |</span><br></pre></td></tr></table></figure>
<p>效果展示：</p>
<table>
<thead>
<tr>
<th>一个普通标题</th>
<th>一个普通标题</th>
<th>一个普通标题</th>
</tr>
</thead>
<tbody>
<tr>
<td>短文本</td>
<td>中等文本</td>
<td>稍微长一点的文本</td>
</tr>
<tr>
<td>稍微长一点的文本</td>
<td>短文本</td>
<td>中等文本</td>
</tr>
</tbody>
</table>
<p>表格左对齐/右对齐/剧中对齐的语法如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐标题 | 右对齐标题 | 居中对齐标题 |</span><br><span class="line">| :------| ------: | :------: |</span><br><span class="line">| 短文本 | 中等文本 | 稍微长一点的文本 |</span><br><span class="line">| 稍微长一点的文本 | 短文本 | 中等文本 |</span><br></pre></td></tr></table></figure>
<p>效果展示：</p>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐标题</th>
<th style="text-align:right">右对齐标题</th>
<th style="text-align:center">居中对齐标题</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">短文本</td>
<td style="text-align:right">中等文本</td>
<td style="text-align:center">稍微长一点的文本</td>
</tr>
<tr>
<td style="text-align:left">稍微长一点的文本</td>
<td style="text-align:right">短文本</td>
<td style="text-align:center">中等文本</td>
</tr>
</tbody>
</table>
<p>关于表格写法的一些说明：</p>
<ul>
<li><code>|</code>、<code>-</code>、<code>:</code>之间的多余空格会被忽略，不影响布局。</li>
<li>默认标题栏居中对齐，内容居左对齐。</li>
<li><code>-:</code>表示内容和标题栏居右对齐，<code>:-</code>表示内容和标题栏居左对齐，<code>:-:</code>表示内容和标题栏居中对齐。</li>
<li>内容和<code>|</code>之间的多余空格会被忽略，每行第一个<code>|</code>和最后一个<code>|</code>可以省略，<code>-</code>的数量至少有一个。</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://www.appinn.com/markdown/" target="_blank" rel="external">Markdown 语法说明 (简体中文版)</a></li>
<li><a href="http://www.jianshu.com/p/q81RER/" target="_blank" rel="external">献给写作者的 Markdown 新手指南</a></li>
<li><a href="http://glgjing.github.io/blog/2015/04/03/markdown-biao-ge-yu-fa/" target="_blank" rel="external">Markdown 插入表格语法</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo搭建个人博客]]></title>
      <url>http://flwcy.coding.me/2016/07/05/build-personal-blog/</url>
      <content type="html"><![CDATA[<p>本文主要基于window系统以及Hexo3版本，其他系统除了软件的安装方式和命令有些差异，其他基本一样。一般hexo都是托管在github上，但是毕竟github是国外的网站，访问速度上还是有点慢，所以就将博客部署在国内的托管平台coding上。<br><a id="more"></a></p>
<h2 id="前置步骤"><a href="#前置步骤" class="headerlink" title="前置步骤"></a>前置步骤</h2><p> 所需软件:</p>
<ul>
<li><a href="!https://nodejs.org/en/">node.js</a> :因为Hexo是一款基于Node.js的静态博客框架，所以我们还需要node.js来创建Hexo博客框架。</li>
<li><a href="!https://git-scm.com/">git</a> :将本地的Hexo内容提交至git中</li>
</ul>
<p>如果已经安装好了上述必备程序，那么接下来只需要使用npm命令完成hexo的安装。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo -cli</span><br></pre></td></tr></table></figure></p>
<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p> 接下来我们需要用Hexo初始化一个博客，然后更改一些自定义的配置，或者加上自己喜欢的主题，写上第一篇文章，然后发布到自己的个人coding网站(userName.coding.me)。</p>
<h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p> 将下面的userName替换成你自己的昵称，执行成功后会在指定文件夹中新建所需要的文件。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init userName.coding.me</span><br></pre></td></tr></table></figure></p>
<p> 新建完成后，指定文件夹目录如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br><span class="line">|   └── landscape</span><br></pre></td></tr></table></figure></p>
<p> 为了使博客更加美观，我们为博客安装一个双栏博客主题，切换至刚刚生成的hexo目录<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd userName.coding.me</span><br></pre></td></tr></table></figure></p>
<p> 安装Hexo主题yelee<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</span><br></pre></td></tr></table></figure></p>
<p> 执行完毕后会看到主题已经安装到对应目录，再修改Hexo根目录对应配置文件_config.yml，即可切换到Yelee主题<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: Yelee</span><br></pre></td></tr></table></figure></p>
<p> 执行以下命令预览当前主题,测试服务启动，你可以在浏览器中输入<a href="https://localhost:4000" target="_blank" rel="external">https://localhost:4000</a> 进行访问了。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></p>
<p> 主题配置文件在userName.coding.me/themes/yelee/_comfig.yml中修改，本文略过，具体可查看 <a href="!http://moxfive.coding.me/yelee/">主题配置文档</a> 。</p>
<h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p> 在<a href="!https://coding.net/register">Coding</a>上进行注册，然后在Coding上创建一个项目，在本地浏览自己的博客没问题后，我们就需要把博客部署到到Coding上，现在根目录下找到_config.yml文件，并进入编辑。我们找到deploy这项，具体修改如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  #我们是使用 git 来部署的。</span><br><span class="line">  type: git</span><br><span class="line">  # git 仓库的地址,userName为coding的用户名，projectName为创建的项目名称</span><br><span class="line">  repo: https://git.coding.net/userName/projectName.git</span><br><span class="line">  #分支名称</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<p> <strong>注意事项：</strong>修改配置文件时，必须严格按照特定的格式，必须是这个格式，type，repo，branch前两个空格，“：”后面一个空格。<br> 按照上面的修改好_config.yml配置文件过后，还需要安装自动部署发布工具(hexo-deployer-git)才能够使用部署命令将博客部署到<a href="!https://coding.net">Coding</a>上。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p> 执行config命令配置用户名和邮箱：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config -–global user.name &quot;xxx&quot;</span><br><span class="line">git config –-global user.email &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></figure></p>
<p> 测试没问题后，就可以使用如下命令将生成的静态网页文件发布到Coding上：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p>
<p> 把代码push到Coding上之前，终端会让你输入邮箱和密码，正确输入后，稍等片刻，就会将博客上传至Coding上。以后每次博客有更新，都可以使用该条命令进行发布。</p>
<h3 id="Pages演示"><a href="#Pages演示" class="headerlink" title="Pages演示"></a>Pages演示</h3><p> 为了能够访问博客，我们需要将博客托管到<a href="!https://coding.net/help/doc/pages/index.html">Coding Pages</a>上,首先在本地创建一个Readme.md的文件说明，将项目文件夹初始化为Git版本库并提交Readme.md到版本库，并未项目添加远程仓库地址<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add  Readme.md</span><br><span class="line">git commit -m &apos;init&apos;</span><br><span class="line">git remote add origin git@git.coding.net:&#123;user_name&#125;/&#123;project_name&#125;</span><br></pre></td></tr></table></figure></p>
<p> 在本地创建一个 coding-pages 分支，切换到该分支<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b coding-pages</span><br></pre></td></tr></table></figure></p>
<p> 将 coding-pages 分支推送到 Coding.net<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  push origin coding-pages</span><br></pre></td></tr></table></figure></p>
<p> 进入私有项目页面，点击左侧栏的 <code>代码</code> 面板 ，选择 <code>Pages 服务</code> 一项可以看到部署 Pages 的设置。（公开项目点击 Pages 选项卡即可），填写您欲部署的分支（默认为 <code>coding-pages</code> ），点击 <code>立即开启</code> ，稍等片刻即可完成部署并通过 {user_name}.coding.me 访问您的网站。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JDBC入门]]></title>
      <url>http://flwcy.coding.me/2016/06/30/01-start-jdbc/</url>
      <content type="html"><![CDATA[<p>什么是JDBC?<br>Java语言访问数据库的一种规范,是一套API。JDBC (Java Database Connectivity) API，即Java数据库编程接口，是一组标准的Java语言中的接口和类，使用这些接口和类，Java客户端程序可以访问各种不同类型的数据库。比如建立数据库连接、执行SQL语句进行数据的存取操作。<br><a id="more"></a></p>
<h2 id="jdbc的概念"><a href="#jdbc的概念" class="headerlink" title="jdbc的概念"></a><strong>jdbc的概念</strong></h2><pre><code>jdbc:java data base connectivity
jdbc由一些接口和类构成的api，是javaSE的一部分，位于java.sql以及javax.sql包下。
sun公司提供了这些连接数据库的规范，由数据库的生产厂商提供驱动程序。
</code></pre><p><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_01.jpg" alt="jdbc关系图"></p>
<h2 id="数据库连接的基本步骤"><a href="#数据库连接的基本步骤" class="headerlink" title="数据库连接的基本步骤"></a><strong>数据库连接的基本步骤</strong></h2><p>1、注册数据库驱动(Driver)<br>2、建立连接(Connection)<br>3、创建执行sql语句(一般是Statement及其子类)<br>4、执行sql语句获得结果集(ResultSet)<br>5、处理执行结果（在非查询语句中，该步骤可以省略）<br>6、关闭连接，释放资源</p>
<h2 id="Talk-is-cheap-Show-me-the-code"><a href="#Talk-is-cheap-Show-me-the-code" class="headerlink" title="Talk is cheap.Show me the code"></a><strong>Talk is cheap.Show me the code</strong></h2><p>首先进行一些准备工作，创建表，本bolg是在mysql新建的db_jdbc库中创建了表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> db_user(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    user_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    birthday <span class="built_in">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>为了方便，先插入两条测试数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> db_user(<span class="keyword">id</span>,user_name,<span class="string">`password`</span>,email,birthday) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">"jjr"</span> ,<span class="string">"jjr123"</span> ,<span class="string">"jjr123@126.net"</span> ,<span class="string">"1991-09-08"</span> );</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> db_user(<span class="keyword">id</span>,user_name,<span class="string">`password`</span>,email,birthday) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">"js123"</span> ,<span class="string">"123456"</span> ,<span class="string">"js123@126.net"</span> ,<span class="string">"1991-09-08"</span> )</span><br></pre></td></tr></table></figure></p>
<p><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_02.jpg" alt="测试数据"><br>查看JDBC文档，我们发现首先需要下载或者拷贝一份数据库驱动程序到本机，然后将驱动程序添加到项目中，我使用的是MySql数据库，因此去MySql官网下载驱动程序。</p>
<blockquote>
<p>Installing a JDBC driver generally consists of copying the driver to your computer, then adding the location of it to your class path.</p>
</blockquote>
<p>编写查询所有数据的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//1、注册驱动(Driver)</span></span><br><span class="line">    DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    <span class="comment">//2、建立数据库连接(Connection)</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">//3、创建执行sql语句(一般是Statement及其子类)</span></span><br><span class="line">    Statement statement = conn.createStatement();</span><br><span class="line">    <span class="comment">//4、执行sql语句获得结果集(ResultSet)</span></span><br><span class="line">    ResultSet resultSet = statement.executeQuery(<span class="string">"select * from db_user"</span>);</span><br><span class="line">    <span class="comment">//5、处理执行结果，在非查询语句中，该步骤可以省略</span></span><br><span class="line">    <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">        String result = String.format(<span class="string">"id=%s,userName=%s,passowrd=%s,email=%s,birthday=%s"</span>, resultSet.getInt(<span class="string">"id"</span>),</span><br><span class="line">                resultSet.getString(<span class="string">"user_name"</span>),resultSet.getString(<span class="string">"password"</span>), resultSet.getString(<span class="string">"email"</span>)</span><br><span class="line">                ,resultSet.getDate(<span class="string">"birthday"</span>));</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6、关闭连接，释放资源</span></span><br><span class="line">    resultSet.close();</span><br><span class="line">    statement.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果显示如下<br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_03.jpg" alt="执行结果"></p>
<h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a><strong>代码详解</strong></h2><h3 id="注册驱动的三种方式"><a href="#注册驱动的三种方式" class="headerlink" title="注册驱动的三种方式"></a><strong>注册驱动的三种方式</strong></h3><p>在步骤一中我们注册了数据库的驱动，常用的注册驱动有三种方式<br>方式一：通过DriverManager.registerDriver(new com.mysql.jdbc.Driver());<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">secondConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//该方法在编译时需要导入对应的jar包</span></span><br><span class="line">    DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>,conn.isClosed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>方式二：通过Class.forName(“com.mysql.jdbc.Driver”)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstConn</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException,SQLException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>,conn.isClosed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>方式三：通过查看DriverManager的api文档，我们发现这么一段说明：</p>
<blockquote>
<p>As part of its initialization, the <code>DriverManager</code> class will attempt to load the driver classes referenced in the “jdbc.drivers” system property.</p>
</blockquote>
<p>因此我们可以通过System.setProperty(“jdbc.drivers”,”com.mysql.jdbc.Driver”);注册驱动，该方式可以一次注册多个驱动，中间用”:”隔开就可以了.比如System.setProperty(“jdbc.drivers”,”XXXDriver:XXXDriver:XXXDriver”);</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thridConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">    As part of its initialization, the DriverManager class will attempt to load the driver classes referenced in the "jdbc.drivers" system property.</span><br><span class="line">     */</span></span><br><span class="line">    System.setProperty(<span class="string">"jdbc.Drivers"</span>, <span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>, conn.isClosed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这点我们可以查看DriverManager源码发现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadInitialDrivers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String drivers;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        drivers = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;String&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> System.getProperty(<span class="string">"jdbc.drivers"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        drivers = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Drivers以”:”分隔<code>String[] driversList = drivers.split(&quot;:&quot;);</code></p>
<p>获取数据库连接Connection推荐使用Class.forName这种方式。<br>我们进行源代码分析，DriverManager自身内部维护了一个registeredDrivers集合，DriverManager决定使用哪个驱动来获取连接并不是由开发者所决定的，而是遍历所有已注册的驱动来尝试获取连接，成功就返回连接，失败就略过。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(DriverInfo aDriver : registeredDrivers) &#123;</span><br><span class="line">            <span class="comment">// If the caller does not have permission to load the driver then</span></span><br><span class="line">            <span class="comment">// skip it.</span></span><br><span class="line">            <span class="keyword">if</span>(isDriverAllowed(aDriver.driver, callerCL)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    println(<span class="string">"    trying "</span> + aDriver.driver.getClass().getName());</span><br><span class="line">                    Connection con = aDriver.driver.connect(url, info);</span><br><span class="line">                    <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// Success!</span></span><br><span class="line">                        println(<span class="string">"getConnection returning "</span> + aDriver.driver.getClass().getName());</span><br><span class="line">                        <span class="keyword">return</span> (con);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (reason == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        reason = ex;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                println(<span class="string">"    skipping: "</span> + aDriver.getClass().getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>哪么registeredDrivers集合是从哪来的呢？从DriverManager类中我们发现只能通过registerDriver方法可以往registeredDrivers中注册驱动，因此应该是由驱动类自行将自己注册到registeredDrivers中，这一点可以查看com.mysql.jdbc.Driver的源代码，Class.forName将类加载到JVM时会执行静态代码块的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">extends</span> <span class="title">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">sql</span>.<span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can\'t register driver!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>综上所述，我们调用方法registerDriver就相当于又向drivers列表中放了一次driver驱动，代码不够”优雅”,而且会对具体的类产生了依赖。因此推荐使用Class.forName(“com.mysql.jdbc.Driver”)这种方式，可以通过配置文件的方式使代码更加灵活。</p>
<h3 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a><strong>获取数据库连接</strong></h3><p>连接数据库的过程就是通过驱动与数据库建立连接，一般我们写的应用程序与数据库并不在同一台机器上的，因此需要建立网络连接，实际上底层就是通过TCP/IP建立一个socket连接。数据库会有很多权限验证的，因此我们需要提供对应的用户名以及密码。<br>查看api文档，发现DriverManager中共有三种获得数据库连接的方式<br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_06.jpg" alt="Connection"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstGetConn</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException,SQLException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc?user=root&amp;password=123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>, connection.isClosed());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">secondGetConn</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException,SQLException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.setProperty(<span class="string">"user"</span>,<span class="string">"root"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"password"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>, properties);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>, connection.isClosed());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thirdGetConn</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>, conn.isClosed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中数据库连接的url可查看对应数据库厂商提供的api文档，主流的url格式如下：<br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_07.jpg" alt="url格式"><br>本机使用MySql数据库，查看<a href="https://dev.mysql.com/doc/connector-j/en/connector-j-reference-configuration-properties.html" target="_blank" rel="external">Mysql文档</a><br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_08.jpg" alt="msql"></p>
<h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a><strong>代码优化</strong></h3><p>加载数据库驱动只需执行一次(放在静态代码块中)，资源的获取以及获取数据库的连接可以抽离成独立的方法。一般这些都是写在工具类中，工具类禁止继承(final),工具类只构造一个实例(单例模式/static方法)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rooike.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 数据库操作的工具类</span><br><span class="line"> * Created by Rooike on 2015/9/29.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JdbcUtils</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//  1.加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取数据库连接</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     *  释放数据库资源</span><br><span class="line">     * <span class="doctag">@param</span> resultSet</span><br><span class="line">     * <span class="doctag">@param</span> statement</span><br><span class="line">     * <span class="doctag">@param</span> connection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(resultSet != <span class="keyword">null</span>)&#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        connection.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于单例模式可以查看<a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/" target="_blank" rel="external">如何正确的写出单例模式</a>，这里我们写一个单例数据库工具类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rooike.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 单例（静态内部类的形式）的数据库连接工具类</span><br><span class="line"> * Created by Rooike on 2015/9/29.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfDbUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SelfDbUtils</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url = <span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String user = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SelfDbUtils INSTANCE = <span class="keyword">new</span> SelfDbUtils();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SelfDbUtils <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection,Statement statement,ResultSet resultSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(resultSet != <span class="keyword">null</span>)</span><br><span class="line">                resultSet.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(statement != <span class="keyword">null</span>)</span><br><span class="line">                    statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)</span><br><span class="line">                        connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>数据库的连接是非常稀有的资源，因此涉及数据库的操作时，我们使用完成后，应该及时释放资源。另外程序在运行过程中可能会出现各种异常，我们的应用有义务告诉上层使用者到底出现了什么问题，因此需要保证异常链不能中断，这样就需要一个异常传递的过程。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello 个人博客]]></title>
      <url>http://flwcy.coding.me/2016/06/28/hello-blog/</url>
      <content type="html"><![CDATA[<p>之前在跟同学聊天时听他说起搭建<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>个人静态博客，总是觉得弄个人博客是一个非常麻烦的事情，在<a href="https://kyleljj.github.io/" target="_blank" rel="external">lujj</a>的劝诱下，花了几天的时间搭建了自己的个人博客。</p>
<a id="more"></a>
<h3 id="开博缘由"><a href="#开博缘由" class="headerlink" title="开博缘由"></a>开博缘由</h3><p>之前自己也在csdn上写过博客，大部分都是自己学习过程中的总结，方便自己复习，之所以搭建个人博客，大体是如下几点原因吧！</p>
<ul>
<li>独立/简洁/自由:不想像其他网站上的博客一样，广告或者推广消息漫天飞舞！</li>
<li>记录：记录自己的学习轨迹，便于时常复习，写博客同时也是一个知识沉淀的过程。</li>
<li>分享：赠人玫瑰之手，经久犹有余香！</li>
</ul>
<h3 id="Coding-hexo-markdown"><a href="#Coding-hexo-markdown" class="headerlink" title="Coding+hexo+markdown"></a>Coding+hexo+markdown</h3><p>关于博客具体的搭建可以参考我的另一篇博文<a href="http://flwcy.coding.me/2016/07/05/build-personal-blog/">hexo搭建个人博客</a>，博客使用的是hexo搭建的，为了提高网站的访问速度，将博客托管在<a href="https://coding.net/" target="_blank" rel="external">Coding</a>上，图床使用<a href="http://www.qiniu.com/" target="_blank" rel="external">七牛云</a>来存储的，博客主题使用的是<a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">yelee主题</a>，<del>标签云参照这篇博文<a href="http://www.netcan666.com/2015/12/15/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96%E7%90%83%E5%BD%A2%E6%A0%87%E7%AD%BE%E4%BA%91/index.html" target="_blank" rel="external">Hexo个性化球形标签云</a>修改的。</del><br>MarkDown 相信已经成为技术人员的写文档以及写博客的标配，我也是才开始使用这个没多久，因此本地使用<a href="http://www.typora.io/" target="_blank" rel="external">Typora</a>，所见即所得的编写。</p>
<h3 id="关于博客的未来"><a href="#关于博客的未来" class="headerlink" title="关于博客的未来"></a>关于博客的未来</h3><p>既然花了一段时间搞博客，而且大部分博文也陆续迁移过来了，当然希望能够坚持的更新下去（ps：断更可耻）。希望自己以此为动力，能够不断的去点亮自己的技能树，并锻炼自己总结和分享的能力。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="http://lovenight.github.io/2015/11/10/Hexo-3-1-1-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/index.html" target="_blank" rel="external">Hexo-3-1-1-静态博客搭建指南</a><br><a href="http://moxfive.coding.me/yelee/" target="_blank" rel="external">Yelee主题使用说明</a><br><a href="http://tengj.top/2016/03/14/hexo6seo/" target="_blank" rel="external">hexo干货系列：（六）hexo提交搜索引擎（百度+谷歌）</a><br><a href="http://www.netcan666.com/2015/12/15/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96%E7%90%83%E5%BD%A2%E6%A0%87%E7%AD%BE%E4%BA%91/index.html" target="_blank" rel="external">Hexo个性化球形标签云</a></p>
]]></content>
    </entry>
    
  
  
</search>
