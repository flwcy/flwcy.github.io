<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Statement以及PreparedStatement]]></title>
      <url>http://flwcy.coding.me/2016/07/12/02-statement-detailed/</url>
      <content type="html"><![CDATA[<p>PreparedStatement是用来执行SQL查询语句的API之一，Java提供了 Statement、PreparedStatement 和 CallableStatement三种方式来执行查询语句，其中 Statement 用于通用查询， PreparedStatement 用于执行参数化查询，而 CallableStatement则是用于存储过程。同时PreparedStatement还经常会在Java面试被提及，譬如：Statement与PreparedStatement的区别以及如何避免SQL注入式攻击？</p>
<a id="more"></a>
<h2 id="Statement详解"><a href="#Statement详解" class="headerlink" title="Statement详解"></a>Statement详解</h2><p>Statement是与数据库打交道最关键的一个接口，我们查看API文档</p>
<blockquote>
<p>By default, only one ResultSet object per Statement object can be open at the same time. Therefore, if the reading of one ResultSet object is interleaved with the reading of another, each must have been generated by different Statement objects. All execution methods in the Statement interface implicitly close a statment’s current ResultSet object if an open one exists. </p>
</blockquote>
<p><strong>在默认情况下，同一时间每个Statement只能打开一个ResultSet对象。</strong>因此，如果读取一个ResultSet对象与读取另一个交叉，则这两个对象必须是又不同的Statement对象生成。如果使用相同的Statement打开了新的ResultSet对象，则Statement接口中的所有执行方法都会隐式关闭之前的ResultSet对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     Connection conn = <span class="keyword">null</span>;</span><br><span class="line">     Statement statement = <span class="keyword">null</span>;</span><br><span class="line">     ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = JdbcUtils.getConn();</span><br><span class="line">         statement = conn.createStatement();</span><br><span class="line">         String sql = <span class="string">"select count(*) from db_user"</span>;</span><br><span class="line">         resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">         String _sql = <span class="string">"select user_name,password,email,birthday from db_user where id = 1"</span>;</span><br><span class="line">         <span class="comment">//会隐式关闭之前的ResultSet对象</span></span><br><span class="line">         ResultSet _resultSet = statement.executeQuery(_sql);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//As it seems the junit.framework.Assert class has been moved to org.junit.Assert in JUnit 4.0 - you can use that instead, it's not deprecated.</span></span><br><span class="line">         Assert.assertEquals(<span class="keyword">true</span>, resultSet.isClosed());</span><br><span class="line">     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         JdbcUtils.close(resultSet,statement,conn);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h2><h3 id="1-新增数据的方法"><a href="#1-新增数据的方法" class="headerlink" title="1.新增数据的方法"></a>1.新增数据的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    Statement statement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String sql = <span class="string">"insert into db_jdbc.db_user(user_name,password,email,birthday) values('%s','%s','%s','%s')"</span>;</span><br><span class="line">        sql = String.format(sql, user.getUserName(), user.getPassword(), user.getEmail(), user.getBirthday());</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line"></span><br><span class="line">        statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        statement.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.close(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-读取数据的方法"><a href="#2-读取数据的方法" class="headerlink" title="2.读取数据的方法"></a>2.读取数据的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    User record = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="keyword">null</span> || id &lt;= <span class="number">0</span>) <span class="keyword">return</span> record;</span><br><span class="line">    String sql = <span class="string">"select * from db_jdbc.db_user where id = %s"</span>;</span><br><span class="line">    sql = String.format(sql, id);</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    Statement statement = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line">        statement = connection.createStatement();</span><br><span class="line">        resultSet = statement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            String userName = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">            String password = resultSet.getString(<span class="number">3</span>);</span><br><span class="line">            String email = resultSet.getString(<span class="number">4</span>);</span><br><span class="line">            Timestamp birthday = resultSet.getTimestamp(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            record = <span class="keyword">new</span> User();</span><br><span class="line">            record.setId(id);</span><br><span class="line">            record.setUserName(userName);</span><br><span class="line">            record.setEmail(email);</span><br><span class="line">            record.setBirthday(birthday);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.close(resultSet, statement, connection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> record;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-修改数据的方法"><a href="#3-修改数据的方法" class="headerlink" title="3.修改数据的方法"></a>3.修改数据的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">    User record = selectById(user.getId());</span><br><span class="line"></span><br><span class="line">    String sql = <span class="string">"update db_jdbc.db_user set user_name='%s',password='%s',email='%s',birthday='%s' where id = %s"</span>;</span><br><span class="line">    String userName = (user.getUserName() == <span class="keyword">null</span>) ? record.getUserName() : user.getUserName();</span><br><span class="line">    String password = (user.getPassword() == <span class="keyword">null</span>) ? record.getPassword() : user.getPassword();</span><br><span class="line">    String email = (user.getEmail() == <span class="keyword">null</span>) ? record.getEmail() : user.getEmail();</span><br><span class="line">    Timestamp birthday = (user.getBirthday() == <span class="keyword">null</span>) ? record.getBirthday() : user.getBirthday();</span><br><span class="line">    sql = String.format(sql, userName, password, email, birthday,user.getId());</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    Statement statement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line">        statement = connection.createStatement();</span><br><span class="line">        result = statement.executeUpdate(sql);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.close(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-删除数据的方法"><a href="#4-删除数据的方法" class="headerlink" title="4.删除数据的方法"></a>4.删除数据的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    Integer result = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="keyword">null</span> || id &lt;= <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">    String sql = <span class="string">"delete from db_jdbc.db_user where id = %s"</span>;</span><br><span class="line">    sql = String.format(sql, id);</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    Statement statement = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = JdbcUtils.getConn();</span><br><span class="line">        statement = connection.createStatement();</span><br><span class="line">        result = statement.executeUpdate(sql);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JdbcUtils.close(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参数化查询"><a href="#参数化查询" class="headerlink" title="参数化查询"></a>参数化查询</h2><p>SQL Query 1:字符串追加形式的PreparedStatement</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String userName = getUserName();</span><br><span class="line">PreparedStatement prestmt = conn.prepareStatement(<span class="string">"select user_name,password,email,birthday from db_user where user_name="</span> + userName);</span><br></pre></td></tr></table></figure>
<p>SQL Query 2：使用参数化查询的PreparedStatement</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String userName = getUserName();</span><br><span class="line">PreparedStatement prestmt = conn.prepareStatement(<span class="string">"select user_name,password,email,birthday from db_user where user_name=?"</span>);</span><br><span class="line">prestmt.setString(<span class="number">1</span>,userName);</span><br></pre></td></tr></table></figure>
<p>这里的”?”就是参数的占位符(<strong>占位符的索引位置从1开始而不是0，如果填入0会导致<em>java.sql.SQLException invalid column index</em>异常。所以如果PreparedStatement有两个占位符，那么第一个参数的索引时1，第二个参数的索引是2.</strong>),比起凌乱的字符串追加似的查询，PreparedStatement查询可读性更好、更安全。</p>
<p>PrearedStatement是java.sql包下面的一个驱动，用来执行SQL语句查询. 如果还是用 PreparedStatement 做同样的查询，哪怕参数值不一样，比如：”any_value”或者”ROOIKE”作为参数值，数据库系统还是会去调用之前编译器编译好的执行语句（系统库系统初次会对查询语句做最大的性能优化）。默认会返回”TYPE_FORWARD_ONLY”类型的结果集（ResultSet）,当然你也可以使用preparedstatment()的重载方法返回不同类型的结果集。</p>
<h2 id="Statement的SQL注入问题"><a href="#Statement的SQL注入问题" class="headerlink" title="Statement的SQL注入问题"></a>Statement的SQL注入问题</h2><p>如某个网站的登录验证SQL查询代码为：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> db_user <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'" + userName + "'</span> <span class="keyword">and</span> pw = <span class="string">'"+ passWord +"'</span>;"</span><br></pre></td></tr></table></figure>
<p>如果我们恶意输入如下的参数:</p>
<table>
<thead>
<tr>
<th style="text-align:center">userName</th>
<th style="text-align:center">passWord</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">any_value’ or ‘1’ = ‘1’;show tables --rooike</td>
<td style="text-align:center">any_value</td>
</tr>
</tbody>
</table>
<p>那么最终SQL语句就变成了：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> db_user <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'any_value'</span> <span class="keyword">or</span> <span class="string">'1'</span> = <span class="string">'1'</span>;<span class="keyword">show</span> <span class="keyword">tables</span> <span class="comment">-- rooike and pw = 'any_value';"</span></span><br></pre></td></tr></table></figure>
<p><strong>在MySQL中，最后连续的两个减号表示忽略此SQL减号后面的语句.</strong>因为WHERE条件恒为真，这就相当于执行：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> db_user;<span class="keyword">SHOW</span> <span class="keyword">TABLES</span><span class="string">"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：在MySQL中，最后连续的两个减号表示忽略此SQL减号后面的语句，我本机的MySQL版本号为5.6.12，目前几乎所有SQL注入实例都是直接采用两个减号结尾，但是实际测试，这个版本号的MySQL要求两个减号后面必须要有空格才能正常注入，而浏览器是会自动删除掉URL尾部空格的，所以我们的注入会在两个减号后面统一添加任意一个字符或单词，本篇文章的SQL注入实例统一以 – rooike 结尾。</p>
</blockquote>
<p>因此可以达到无账号密码亦可登录网站且数据库表的名字db_user也被打印在了页面上。如果恶意用户要是更坏一点，用户输入如下参数:</p>
<table>
<thead>
<tr>
<th style="text-align:center">userName</th>
<th style="text-align:center">passWord</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">any_value</td>
<td style="text-align:center">‘; DROP TABLE db_user where ‘1’ = ‘1</td>
</tr>
</tbody>
</table>
<p>那么最终SQL语句变成了：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> db_user <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'any_value'</span> <span class="keyword">and</span> pw = <span class="string">''</span>; <span class="keyword">DROP</span> <span class="keyword">TABLE</span> db_user <span class="keyword">where</span> <span class="string">'1'</span> = <span class="string">'1'</span>;"</span><br></pre></td></tr></table></figure>
<p>这样一来，虽然没有登录，但是数据表都被删除了。</p>
<h2 id="预处理语句"><a href="#预处理语句" class="headerlink" title="预处理语句"></a>预处理语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String url = <span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String userName = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (user == <span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">       Connection connection = <span class="keyword">null</span>;</span><br><span class="line">       PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           String sql = <span class="string">"insert into db_jdbc.db_user(user_name,password,email,birthday) values(?,?,?,?)"</span>;</span><br><span class="line">           sql = String.format(sql, user.getUserName(), user.getPassword(), user.getEmail(), user.getBirthday());</span><br><span class="line">           connection = JdbcUtils.getConn();</span><br><span class="line"></span><br><span class="line">           preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">           preparedStatement.setString(<span class="number">1</span>,user.getUserName());</span><br><span class="line">           preparedStatement.setString(<span class="number">2</span>,user.getPassword());</span><br><span class="line">           preparedStatement.setString(<span class="number">3</span>,user.getEmail());</span><br><span class="line">           preparedStatement.setTimestamp(<span class="number">4</span>, user.getBirthday());</span><br><span class="line"></span><br><span class="line">           preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           JdbcUtils.close(<span class="keyword">null</span>, preparedStatement, connection);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>应用程序在创建好PreparedStatement后，DBMS就已经对SQL进行了预编译(数据库对SQL语句的分析，编译，优化已经在第一次查询前完成了)，同时DBMS会把SQL保存到高速缓存中，调用executeupdate()后，DBMS就直接执行SQL语句了，第二次执行时DBMS会直接查询高速缓存，只要高速缓存中还能找到相同的SQL就无需重新对SQL进行语法语义分析了.</p>
<p>在使用参数化查询的情况下，数据库系统（eg:MySQL）不会将参数的内容视为SQL指令的一部分来处理，而是在数据库完成SQL指令的编译后，才套用参数运行，因此就算参数中含有破坏性的指令，也不会被数据库所运行。因此使用PreparedStatement的参数化的查询可以阻止大部分的SQL注入。</p>
<h2 id="PreparedStatement的局限性"><a href="#PreparedStatement的局限性" class="headerlink" title="PreparedStatement的局限性"></a>PreparedStatement的局限性</h2><p> 为了防止SQL注入攻击，PreparedStatement不允许一个占位符（？）有多个值，在执行有<strong>IN</strong>子句查询的时候这个问题变得棘手起来。下面这个SQL查询使用PreparedStatement就不会返回任何结果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"SELECT * FROM db_user WHERE user_name IN (?)"</span>;</span><br><span class="line">preparedSatement.setString(<span class="number">1</span>, <span class="string">"'jjr123', 'rooike', 'js123'"</span>);</span><br></pre></td></tr></table></figure>
<p>简单总结一下PreparedStatement的优点:</p>
<ul>
<li>PreparedStatement可以阻止常见的SQL注入式攻击。</li>
<li>PreparedStatement可以写参数化查询，比起凌乱的字符串追加似的查询，PreparedStatement查询可读性更好、更安全.</li>
<li>对于PreparedStatement来说，数据库可以使用已经编译过及定义好的执行计划，这种预处理语句查询比普通的查询运行速度更快(Statement总是在执行时发送sql，影响效率.同样的sql，每次都要发送，不能进行有效的缓存，是一种资源的浪费)</li>
</ul>
<h2 id="More-Read"><a href="#More-Read" class="headerlink" title="More Read"></a>More Read</h2><ul>
<li><a href="http://docs.oracle.com/javase/tutorial/jdbc/basics/index.html" target="_blank" rel="external">JDBC Basics</a></li>
<li><a href="http://www.importnew.com/5006.html" target="_blank" rel="external">JDBC为什么要使用PreparedStatement而不是Statement</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法说明]]></title>
      <url>http://flwcy.coding.me/2016/07/11/markdown_syntax/</url>
      <content type="html"><![CDATA[<p>Markdown是一种用来写作的轻量级『标记语言』，它用简洁的语法代替排版，它使我们能够专心于码字，用『标记』语法来代替常见的排版格式。Markdown的语法简洁明了，学习容易，而且功能比很多纯文本更强，因此很多人用它来写博客。<br><a id="more"></a></p>
<h2 id="关于Markdown"><a href="#关于Markdown" class="headerlink" title="关于Markdown"></a>关于Markdown</h2><h3 id="Markdown官方文档"><a href="#Markdown官方文档" class="headerlink" title="Markdown官方文档"></a>Markdown官方文档</h3><blockquote>
<p>更多详细的语法使用可以查看Markdown的官方语法规则文档，本篇文章只是记录了一些个人常用的语法的具体用法:</p>
<ul>
<li><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external"><em>创始人 John Gruber 的 Markdown 语法说明</em></a></li>
<li><a href="http://wowubuntu.com/markdown/#list" target="_blank" rel="external"><em>Markdown 中文版语法说明</em></a></li>
</ul>
</blockquote>
<h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p>工欲善其事，必先利其器！支持Markdown的编辑器太多了，功能也不完全一致，有的是用来进行基本写作的，有的是用来写代码的。本博文就介绍下本人用过的一些Markdown编辑器。</p>
<ul>
<li>马克飞象：实时同步预览，可以同步笔记到印象笔记中，支持导出pdf格式，付费软件，可以免费试用。</li>
<li>cmd markdown：实时同步预览，全平台且提供web版。</li>
<li>MarkdownPad： 一款全功能的编辑器，被很多人称赞为windows 平台最好用的markdown编辑器。</li>
<li>Haroopad：显示效果不错，支持代码高亮，缺点是无法导出pdf文档。</li>
<li>Typora：免费极简的Markdown编辑器，合并了书写和预览，所见即所得。</li>
</ul>
<p>当然也可以使用工作编辑器来打造Markdown编辑器，比如Sublime Text+或者Atom的各种Markdown+Floding+七牛package。 </p>
<h2 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题是写文章最常用的格式之一，在平常的写作当中，我们需要类似如下的操作：输入文本，选中文本，设置标题格式。而在Markdown中，我们只需要在文本前加入#即可。行首插入1-6个 # ，每增加一个 # 表示更深入层次的内容，对应到标题的深度由 1-6 阶，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<p>注：#和文本之间隔一个空格，这是最标准的Markdown写法。</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 <code>&gt;</code> 就好了，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;  “文化”可以用四句话表达:植根于内心的修养;无需提醒的自觉;以约束为前提的自由;为别人着想的善良。—— 梁晓声</span><br></pre></td></tr></table></figure>
<p><em>注：&gt; 和文本之间要保留一个字符的空格。</em></p>
<h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><p>Markdown的粗体和斜体的语法也很简单，Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，具体语法如下（带“*”星号的文本样式，在原版Markdown标准中不存在，但在其大部分衍生标准中被添加）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**粗体**</span><br><span class="line">__粗体__</span><br><span class="line">*斜体*</span><br><span class="line">_斜体_</span><br><span class="line">*删除线：~~text~~</span><br></pre></td></tr></table></figure>
<p>但是<strong>如果你的 <code>\*</code> 和<code>_</code>两边都有空白的话，它们就只会被当成普通的符号</strong>。如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*this text is surrounded by literal asterisks\*</span><br></pre></td></tr></table></figure>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>我们可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表格式也是我们常用的格式之一，具体的书写语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表项目</span><br><span class="line">- 无序列表项目</span><br><span class="line">- 无序列表项目</span><br><span class="line"></span><br><span class="line">* 无序列表项目</span><br><span class="line">* 无序列表项目</span><br><span class="line">* 无序列表项目</span><br><span class="line"></span><br><span class="line">1. 有序列表项目</span><br><span class="line">2. 有序列表项目</span><br><span class="line">3. 有序列表项目</span><br><span class="line"></span><br><span class="line">- 外层列表项目</span><br><span class="line"> + 内层列表项目</span><br><span class="line"> + 内层列表项目</span><br><span class="line"> + 内层列表项目</span><br><span class="line">- 外层列表项目</span><br></pre></td></tr></table></figure>
<p><em>注：-、1.和文本之间要保留一个字符的空格。</em></p>
<h3 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h3><p>当我们需要在博文中插入外链，只需要使用 <code>[显示文本](链接地址)</code> 这样的语法即可，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[flwcy&apos;s blog](http://flwcy.coding.me/)</span><br><span class="line">[无链接的链接][null-link]</span><br><span class="line">[null-link]: chrome://not-a-link</span><br></pre></td></tr></table></figure>
<p>当我们需要在博文中插入外链，只需要使用<code>![](图片链接地址)</code> 这样的语法即可，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![jdbc_start_01](http://o9fozt3s5.bkt.clouddn.com/jdbc_start_01.jpg)</span><br></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>作为一个程序员，我们经常需要在博文中添加示例代码，如果仅仅对一句代码高亮，只需要用`把中间的代码包裹起来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`字符`（简短文字添加代码框）</span><br></pre></td></tr></table></figure>
<p>如果要对整段代码加高亮，则需要在整段代码两端加三个`，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​```代码块```（代码块）</span><br></pre></td></tr></table></figure>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格的语法比较麻烦点，具体写法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 一个普通标题 | 一个普通标题 | 一个普通标题 |</span><br><span class="line">| ------| ------ | ------ |</span><br><span class="line">| 短文本 | 中等文本 | 稍微长一点的文本 |</span><br><span class="line">| 稍微长一点的文本 | 短文本 | 中等文本 |</span><br></pre></td></tr></table></figure>
<p>效果展示：</p>
<table>
<thead>
<tr>
<th>一个普通标题</th>
<th>一个普通标题</th>
<th>一个普通标题</th>
</tr>
</thead>
<tbody>
<tr>
<td>短文本</td>
<td>中等文本</td>
<td>稍微长一点的文本</td>
</tr>
<tr>
<td>稍微长一点的文本</td>
<td>短文本</td>
<td>中等文本</td>
</tr>
</tbody>
</table>
<p>表格左对齐/右对齐/剧中对齐的语法如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐标题 | 右对齐标题 | 居中对齐标题 |</span><br><span class="line">| :------| ------: | :------: |</span><br><span class="line">| 短文本 | 中等文本 | 稍微长一点的文本 |</span><br><span class="line">| 稍微长一点的文本 | 短文本 | 中等文本 |</span><br></pre></td></tr></table></figure>
<p>效果展示：</p>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐标题</th>
<th style="text-align:right">右对齐标题</th>
<th style="text-align:center">居中对齐标题</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">短文本</td>
<td style="text-align:right">中等文本</td>
<td style="text-align:center">稍微长一点的文本</td>
</tr>
<tr>
<td style="text-align:left">稍微长一点的文本</td>
<td style="text-align:right">短文本</td>
<td style="text-align:center">中等文本</td>
</tr>
</tbody>
</table>
<p>关于表格写法的一些说明：</p>
<ul>
<li><code>|</code>、<code>-</code>、<code>:</code>之间的多余空格会被忽略，不影响布局。</li>
<li>默认标题栏居中对齐，内容居左对齐。</li>
<li><code>-:</code>表示内容和标题栏居右对齐，<code>:-</code>表示内容和标题栏居左对齐，<code>:-:</code>表示内容和标题栏居中对齐。</li>
<li>内容和<code>|</code>之间的多余空格会被忽略，每行第一个<code>|</code>和最后一个<code>|</code>可以省略，<code>-</code>的数量至少有一个。</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://www.appinn.com/markdown/" target="_blank" rel="external">Markdown 语法说明 (简体中文版)</a></li>
<li><a href="http://www.jianshu.com/p/q81RER/" target="_blank" rel="external">献给写作者的 Markdown 新手指南</a></li>
<li><a href="http://glgjing.github.io/blog/2015/04/03/markdown-biao-ge-yu-fa/" target="_blank" rel="external">Markdown 插入表格语法</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo搭建个人博客]]></title>
      <url>http://flwcy.coding.me/2016/07/05/build-personal-blog/</url>
      <content type="html"><![CDATA[<p>本文主要基于window系统以及Hexo3版本，其他系统除了软件的安装方式和命令有些差异，其他基本一样。一般hexo都是托管在github上，但是毕竟github是国外的网站，访问速度上还是有点慢，所以就将博客部署在国内的托管平台coding上。<br><a id="more"></a></p>
<h2 id="前置步骤"><a href="#前置步骤" class="headerlink" title="前置步骤"></a>前置步骤</h2><p> 所需软件:</p>
<ul>
<li><a href="!https://nodejs.org/en/">node.js</a> :因为Hexo是一款基于Node.js的静态博客框架，所以我们还需要node.js来创建Hexo博客框架。</li>
<li><a href="!https://git-scm.com/">git</a> :将本地的Hexo内容提交至git中</li>
</ul>
<p>如果已经安装好了上述必备程序，那么接下来只需要使用npm命令完成hexo的安装。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo -cli</span><br></pre></td></tr></table></figure></p>
<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p> 接下来我们需要用Hexo初始化一个博客，然后更改一些自定义的配置，或者加上自己喜欢的主题，写上第一篇文章，然后发布到自己的个人coding网站(userName.coding.me)。</p>
<h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p> 将下面的userName替换成你自己的昵称，执行成功后会在指定文件夹中新建所需要的文件。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init userName.coding.me</span><br></pre></td></tr></table></figure></p>
<p> 新建完成后，指定文件夹目录如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br><span class="line">|   └── landscape</span><br></pre></td></tr></table></figure></p>
<p> 为了使博客更加美观，我们为博客安装一个双栏博客主题，切换至刚刚生成的hexo目录<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd userName.coding.me</span><br></pre></td></tr></table></figure></p>
<p> 安装Hexo主题yelee<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</span><br></pre></td></tr></table></figure></p>
<p> 执行完毕后会看到主题已经安装到对应目录，再修改Hexo根目录对应配置文件_config.yml，即可切换到Yelee主题<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: Yelee</span><br></pre></td></tr></table></figure></p>
<p> 执行以下命令预览当前主题,测试服务启动，你可以在浏览器中输入<a href="https://localhost:4000" target="_blank" rel="external">https://localhost:4000</a> 进行访问了。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></p>
<p> 主题配置文件在userName.coding.me/themes/yelee/_comfig.yml中修改，本文略过，具体可查看 <a href="!http://moxfive.coding.me/yelee/">主题配置文档</a> 。</p>
<h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p> 在<a href="!https://coding.net/register">Coding</a>上进行注册，然后在Coding上创建一个项目，在本地浏览自己的博客没问题后，我们就需要把博客部署到到Coding上，现在根目录下找到_config.yml文件，并进入编辑。我们找到deploy这项，具体修改如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  #我们是使用 git 来部署的。</span><br><span class="line">  type: git</span><br><span class="line">  # git 仓库的地址,userName为coding的用户名，projectName为创建的项目名称</span><br><span class="line">  repo: https://git.coding.net/userName/projectName.git</span><br><span class="line">  #分支名称</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<p> <strong>注意事项：</strong>修改配置文件时，必须严格按照特定的格式，必须是这个格式，type，repo，branch前两个空格，“：”后面一个空格。<br> 按照上面的修改好_config.yml配置文件过后，还需要安装自动部署发布工具(hexo-deployer-git)才能够使用部署命令将博客部署到<a href="!https://coding.net">Coding</a>上。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p> 执行config命令配置用户名和邮箱：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config -–global user.name &quot;xxx&quot;</span><br><span class="line">git config –-global user.email &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></figure></p>
<p> 测试没问题后，就可以使用如下命令将生成的静态网页文件发布到Coding上：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p>
<p> 把代码push到Coding上之前，终端会让你输入邮箱和密码，正确输入后，稍等片刻，就会将博客上传至Coding上。以后每次博客有更新，都可以使用该条命令进行发布。</p>
<h3 id="Pages演示"><a href="#Pages演示" class="headerlink" title="Pages演示"></a>Pages演示</h3><p> 为了能够访问博客，我们需要将博客托管到<a href="!https://coding.net/help/doc/pages/index.html">Coding Pages</a>上,首先在本地创建一个Readme.md的文件说明，将项目文件夹初始化为Git版本库并提交Readme.md到版本库，并未项目添加远程仓库地址<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add  Readme.md</span><br><span class="line">git commit -m &apos;init&apos;</span><br><span class="line">git remote add origin git@git.coding.net:&#123;user_name&#125;/&#123;project_name&#125;</span><br></pre></td></tr></table></figure></p>
<p> 在本地创建一个 coding-pages 分支，切换到该分支<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b coding-pages</span><br></pre></td></tr></table></figure></p>
<p> 将 coding-pages 分支推送到 Coding.net<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  push origin coding-pages</span><br></pre></td></tr></table></figure></p>
<p> 进入私有项目页面，点击左侧栏的 <code>代码</code> 面板 ，选择 <code>Pages 服务</code> 一项可以看到部署 Pages 的设置。（公开项目点击 Pages 选项卡即可），填写您欲部署的分支（默认为 <code>coding-pages</code> ），点击 <code>立即开启</code> ，稍等片刻即可完成部署并通过 {user_name}.coding.me 访问您的网站。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JDBC入门]]></title>
      <url>http://flwcy.coding.me/2016/06/30/01-start-jdbc/</url>
      <content type="html"><![CDATA[<p>什么是JDBC?<br>Java语言访问数据库的一种规范,是一套API。JDBC (Java Database Connectivity) API，即Java数据库编程接口，是一组标准的Java语言中的接口和类，使用这些接口和类，Java客户端程序可以访问各种不同类型的数据库。比如建立数据库连接、执行SQL语句进行数据的存取操作。<br><a id="more"></a></p>
<h2 id="jdbc的概念"><a href="#jdbc的概念" class="headerlink" title="jdbc的概念"></a><strong>jdbc的概念</strong></h2><pre><code>jdbc:java data base connectivity
jdbc由一些接口和类构成的api，是javaSE的一部分，位于java.sql以及javax.sql包下。
sun公司提供了这些连接数据库的规范，由数据库的生产厂商提供驱动程序。
</code></pre><p><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_01.jpg" alt="jdbc关系图"></p>
<h2 id="数据库连接的基本步骤"><a href="#数据库连接的基本步骤" class="headerlink" title="数据库连接的基本步骤"></a><strong>数据库连接的基本步骤</strong></h2><p>1、注册数据库驱动(Driver)<br>2、建立连接(Connection)<br>3、创建执行sql语句(一般是Statement及其子类)<br>4、执行sql语句获得结果集(ResultSet)<br>5、处理执行结果（在非查询语句中，该步骤可以省略）<br>6、关闭连接，释放资源</p>
<h2 id="Talk-is-cheap-Show-me-the-code"><a href="#Talk-is-cheap-Show-me-the-code" class="headerlink" title="Talk is cheap.Show me the code"></a><strong>Talk is cheap.Show me the code</strong></h2><p>首先进行一些准备工作，创建表，本bolg是在mysql新建的db_jdbc库中创建了表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> db_user(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    user_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    birthday <span class="built_in">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>为了方便，先插入两条测试数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> db_user(<span class="keyword">id</span>,user_name,<span class="string">`password`</span>,email,birthday) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">"jjr"</span> ,<span class="string">"jjr123"</span> ,<span class="string">"jjr123@126.net"</span> ,<span class="string">"1991-09-08"</span> );</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> db_user(<span class="keyword">id</span>,user_name,<span class="string">`password`</span>,email,birthday) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">"js123"</span> ,<span class="string">"123456"</span> ,<span class="string">"js123@126.net"</span> ,<span class="string">"1991-09-08"</span> )</span><br></pre></td></tr></table></figure></p>
<p><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_02.jpg" alt="测试数据"><br>查看JDBC文档，我们发现首先需要下载或者拷贝一份数据库驱动程序到本机，然后将驱动程序添加到项目中，我使用的是MySql数据库，因此去MySql官网下载驱动程序。</p>
<blockquote>
<p>Installing a JDBC driver generally consists of copying the driver to your computer, then adding the location of it to your class path.</p>
</blockquote>
<p>编写查询所有数据的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//1、注册驱动(Driver)</span></span><br><span class="line">    DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    <span class="comment">//2、建立数据库连接(Connection)</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">//3、创建执行sql语句(一般是Statement及其子类)</span></span><br><span class="line">    Statement statement = conn.createStatement();</span><br><span class="line">    <span class="comment">//4、执行sql语句获得结果集(ResultSet)</span></span><br><span class="line">    ResultSet resultSet = statement.executeQuery(<span class="string">"select * from db_user"</span>);</span><br><span class="line">    <span class="comment">//5、处理执行结果，在非查询语句中，该步骤可以省略</span></span><br><span class="line">    <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">        String result = String.format(<span class="string">"id=%s,userName=%s,passowrd=%s,email=%s,birthday=%s"</span>, resultSet.getInt(<span class="string">"id"</span>),</span><br><span class="line">                resultSet.getString(<span class="string">"user_name"</span>),resultSet.getString(<span class="string">"password"</span>), resultSet.getString(<span class="string">"email"</span>)</span><br><span class="line">                ,resultSet.getDate(<span class="string">"birthday"</span>));</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6、关闭连接，释放资源</span></span><br><span class="line">    resultSet.close();</span><br><span class="line">    statement.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果显示如下<br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_03.jpg" alt="执行结果"></p>
<h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a><strong>代码详解</strong></h2><h3 id="注册驱动的三种方式"><a href="#注册驱动的三种方式" class="headerlink" title="注册驱动的三种方式"></a><strong>注册驱动的三种方式</strong></h3><p>在步骤一中我们注册了数据库的驱动，常用的注册驱动有三种方式<br>方式一：通过DriverManager.registerDriver(new com.mysql.jdbc.Driver());<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">secondConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//该方法在编译时需要导入对应的jar包</span></span><br><span class="line">    DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>,conn.isClosed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>方式二：通过Class.forName(“com.mysql.jdbc.Driver”)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstConn</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException,SQLException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>,conn.isClosed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>方式三：通过System.setProperty(“jdbc.drivers”,”com.mysql.jdbc.Driver”);可以一次注册多个驱动，中间用”:”隔开就可以了.比如System.setProperty(“jdbc.drivers”,”XXXDriver:XXXDriver:XXXDriver”);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thridConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">    As part of its initialization, the DriverManager class will attempt to load the driver classes referenced in the "jdbc.drivers" system property.</span><br><span class="line">     */</span></span><br><span class="line">    System.setProperty(<span class="string">"jdbc.Drivers"</span>, <span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>, conn.isClosed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在DriverManager源码中<br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_04.jpg" alt="源代码"><br>Drivers以”:”分隔<br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_05.jpg" alt="源代码"><br>推荐使用Class.forName这种方式。<br>我们进行源代码分析，DriverManager自身内部维护了一个registeredDrivers集合，DriverManager决定使用哪个驱动来获取连接并不是由开发者所决定的，而是遍历所有已注册的驱动来尝试获取连接，成功就返回连接，失败就略过。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(DriverInfo aDriver : registeredDrivers) &#123;</span><br><span class="line">            <span class="comment">// If the caller does not have permission to load the driver then</span></span><br><span class="line">            <span class="comment">// skip it.</span></span><br><span class="line">            <span class="keyword">if</span>(isDriverAllowed(aDriver.driver, callerCL)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    println(<span class="string">"    trying "</span> + aDriver.driver.getClass().getName());</span><br><span class="line">                    Connection con = aDriver.driver.connect(url, info);</span><br><span class="line">                    <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// Success!</span></span><br><span class="line">                        println(<span class="string">"getConnection returning "</span> + aDriver.driver.getClass().getName());</span><br><span class="line">                        <span class="keyword">return</span> (con);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (reason == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        reason = ex;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                println(<span class="string">"    skipping: "</span> + aDriver.getClass().getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>哪么registeredDrivers集合是从哪来的呢？从DriverManager类中我们发现只能通过registerDriver方法可以往registeredDrivers中注册驱动，因此应该是由驱动类自行将自己注册到registeredDrivers中，这一点可以查看com.mysql.jdbc.Driver的源代码，Class.forName将类加载到JVM时会执行静态代码块的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">extends</span> <span class="title">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">sql</span>.<span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can\'t register driver!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>综上所述，我们调用方法registerDriver就相当于又向drivers列表中放了一次driver驱动，代码不够”优雅”,而且会对具体的类产生了依赖。因此推荐使用Class.forName(“com.mysql.jdbc.Driver”)这种方式，可以通过配置文件的方式使代码更加灵活。</p>
<h3 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a><strong>获取数据库连接</strong></h3><p>连接数据库的过程就是通过驱动与数据库建立连接，一般我们写的应用程序与数据库并不在同一台机器上的，因此需要建立网络连接，实际上底层就是通过TCP/IP建立一个socket连接。数据库会有很多权限验证的，因此我们需要提供对应的用户名以及密码。<br>查看api文档，发现DriverManager中共有三种获得数据库连接的方式<br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_06.jpg" alt="Connection"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstGetConn</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException,SQLException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc?user=root&amp;password=123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>, connection.isClosed());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">secondGetConn</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException,SQLException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.setProperty(<span class="string">"user"</span>,<span class="string">"root"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"password"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>, properties);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>, connection.isClosed());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thirdGetConn</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">false</span>, conn.isClosed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中数据库连接的url可查看对应数据库厂商提供的api文档，主流的url格式如下：<br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_07.jpg" alt="url格式"><br>本机使用MySql数据库，查看<a href="https://dev.mysql.com/doc/connector-j/en/connector-j-reference-configuration-properties.html" target="_blank" rel="external">Mysql文档</a><br><img src="http://o9fozt3s5.bkt.clouddn.com/jdbc_start_08.jpg" alt="msql"></p>
<h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a><strong>代码优化</strong></h3><p>加载数据库驱动只需执行一次(放在静态代码块中)，资源的获取以及获取数据库的连接可以抽离成独立的方法。一般这些都是写在工具类中，工具类禁止继承(final),工具类只构造一个实例(单例模式/static方法)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rooike.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 数据库操作的工具类</span><br><span class="line"> * Created by Rooike on 2015/9/29.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JdbcUtils</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//  1.加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取数据库连接</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     *  释放数据库资源</span><br><span class="line">     * <span class="doctag">@param</span> resultSet</span><br><span class="line">     * <span class="doctag">@param</span> statement</span><br><span class="line">     * <span class="doctag">@param</span> connection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(resultSet != <span class="keyword">null</span>)&#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        connection.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于单例模式可以查看<a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/" target="_blank" rel="external">如何正确的写出单例模式</a>，这里我们写一个单例数据库工具类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rooike.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 单例（静态内部类的形式）的数据库连接工具类</span><br><span class="line"> * Created by Rooike on 2015/9/29.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfDbUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SelfDbUtils</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url = <span class="string">"jdbc:mysql://localhost:3306/db_jdbc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String user = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SelfDbUtils INSTANCE = <span class="keyword">new</span> SelfDbUtils();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SelfDbUtils <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection,Statement statement,ResultSet resultSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(resultSet != <span class="keyword">null</span>)</span><br><span class="line">                resultSet.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(statement != <span class="keyword">null</span>)</span><br><span class="line">                    statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)</span><br><span class="line">                        connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>数据库的连接是非常稀有的资源，因此涉及数据库的操作时，我们使用完成后，应该及时释放资源。另外程序在运行过程中可能会出现各种异常，我们的应用有义务告诉上层使用者到底出现了什么问题，因此需要保证异常链不能中断，这样就需要一个异常传递的过程。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello 个人博客]]></title>
      <url>http://flwcy.coding.me/2016/06/28/hello-blog/</url>
      <content type="html"><![CDATA[<p>之前在跟同学聊天时听他说起搭建<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>个人静态博客，总是觉得弄个人博客是一个非常麻烦的事情，在<a href="https://kyleljj.github.io/" target="_blank" rel="external">lujj</a>的劝诱下，花了几天的时间搭建了自己的个人博客。</p>
<a id="more"></a>
<h3 id="开博缘由"><a href="#开博缘由" class="headerlink" title="开博缘由"></a>开博缘由</h3><p>之前自己也在csdn上写过博客，大部分都是自己学习过程中的总结，方便自己复习，之所以搭建个人博客，大体是如下几点原因吧！</p>
<ul>
<li>独立/简洁/自由:不想像其他网站上的博客一样，广告或者推广消息漫天飞舞！</li>
<li>记录：记录自己的学习轨迹，便于时常复习，在写博客的时间能够进行知识点的总结。</li>
<li>分享：与人玫瑰，手有余香！</li>
</ul>
<h3 id="Coding-hexo-markdown"><a href="#Coding-hexo-markdown" class="headerlink" title="Coding+hexo+markdown"></a>Coding+hexo+markdown</h3><p>关于博客具体的搭建可以参考我的另一篇博文<a href="http://flwcy.coding.me/2016/07/05/build-personal-blog/">hexo搭建个人博客</a>，博客使用的是hexo搭建的，为了提高网站的访问速度，将博客托管在<a href="https://coding.net/" target="_blank" rel="external">Coding</a>上，图床使用<a href="http://www.qiniu.com/" target="_blank" rel="external">七牛云</a>来存储的，博客主题使用的是<a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">yelee主题</a>，标签云参照这篇博文<a href="http://www.netcan666.com/2015/12/15/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96%E7%90%83%E5%BD%A2%E6%A0%87%E7%AD%BE%E4%BA%91/index.html" target="_blank" rel="external">Hexo个性化球形标签云</a>修改的。<br>MarkDown 相信已经成为技术人员的写文档以及写博客的标配，我也是才开始使用这个没多久，因此本地使用<a href="http://www.typora.io/" target="_blank" rel="external">Typora</a>，所见即所得的编写。</p>
<h3 id="关于博客的未来"><a href="#关于博客的未来" class="headerlink" title="关于博客的未来"></a>关于博客的未来</h3><p>既然花了一段时间搞博客，而且大部分博文也陆续迁移过来了，当然希望能够坚持的更新下去（ps：断更可耻）。希望自己以此为动力，能够不断的去点亮自己的技能树，并锻炼自己总结和分享的能力。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="http://lovenight.github.io/2015/11/10/Hexo-3-1-1-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/index.html" target="_blank" rel="external">Hexo-3-1-1-静态博客搭建指南</a><br><a href="http://moxfive.coding.me/yelee/" target="_blank" rel="external">Yelee主题使用说明</a><br><a href="http://tengj.top/2016/03/14/hexo6seo/" target="_blank" rel="external">hexo干货系列：（六）hexo提交搜索引擎（百度+谷歌）</a><br><a href="http://www.netcan666.com/2015/12/15/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96%E7%90%83%E5%BD%A2%E6%A0%87%E7%AD%BE%E4%BA%91/index.html" target="_blank" rel="external">Hexo个性化球形标签云</a></p>
]]></content>
    </entry>
    
  
  
</search>
